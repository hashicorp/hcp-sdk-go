// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HashicorpWaypointUIReleaseBundle A release packaged alongside prefetched related messages.
//
// swagger:model hashicorp.waypoint.UI.ReleaseBundle
type HashicorpWaypointUIReleaseBundle struct {

	// The most recent status report generated for this release.
	LatestStatusReport *HashicorpWaypointStatusReport `json:"latest_status_report,omitempty"`

	// The release in question.
	Release *HashicorpWaypointRelease `json:"release,omitempty"`
}

// Validate validates this hashicorp waypoint UI release bundle
func (m *HashicorpWaypointUIReleaseBundle) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLatestStatusReport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelease(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpWaypointUIReleaseBundle) validateLatestStatusReport(formats strfmt.Registry) error {
	if swag.IsZero(m.LatestStatusReport) { // not required
		return nil
	}

	if m.LatestStatusReport != nil {
		if err := m.LatestStatusReport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latest_status_report")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("latest_status_report")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointUIReleaseBundle) validateRelease(formats strfmt.Registry) error {
	if swag.IsZero(m.Release) { // not required
		return nil
	}

	if m.Release != nil {
		if err := m.Release.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("release")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("release")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hashicorp waypoint UI release bundle based on the context it is used
func (m *HashicorpWaypointUIReleaseBundle) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLatestStatusReport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelease(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpWaypointUIReleaseBundle) contextValidateLatestStatusReport(ctx context.Context, formats strfmt.Registry) error {

	if m.LatestStatusReport != nil {

		if swag.IsZero(m.LatestStatusReport) { // not required
			return nil
		}

		if err := m.LatestStatusReport.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latest_status_report")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("latest_status_report")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointUIReleaseBundle) contextValidateRelease(ctx context.Context, formats strfmt.Registry) error {

	if m.Release != nil {

		if swag.IsZero(m.Release) { // not required
			return nil
		}

		if err := m.Release.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("release")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("release")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpWaypointUIReleaseBundle) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpWaypointUIReleaseBundle) UnmarshalBinary(b []byte) error {
	var res HashicorpWaypointUIReleaseBundle
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
