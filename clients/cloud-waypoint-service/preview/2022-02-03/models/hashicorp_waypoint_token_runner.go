// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HashicorpWaypointTokenRunner hashicorp waypoint token runner
//
// swagger:model hashicorp.waypoint.Token.Runner
type HashicorpWaypointTokenRunner struct {

	// Id is the exact ID to match for this token. If a runner with another
	// ID attempts to use this token, it will reject it. This can be blank
	// to allow any ID.
	ID string `json:"id,omitempty"`

	// If non-zero, the label set of the runner must hash to the same value
	// for this token to be active. This prevents runners changing their
	// labels after adoption (i.e. to go from targeting dev to prod).
	LabelHash string `json:"label_hash,omitempty"`
}

// Validate validates this hashicorp waypoint token runner
func (m *HashicorpWaypointTokenRunner) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this hashicorp waypoint token runner based on context it is used
func (m *HashicorpWaypointTokenRunner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpWaypointTokenRunner) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpWaypointTokenRunner) UnmarshalBinary(b []byte) error {
	var res HashicorpWaypointTokenRunner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
