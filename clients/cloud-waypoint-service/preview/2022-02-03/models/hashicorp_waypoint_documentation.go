// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HashicorpWaypointDocumentation hashicorp waypoint documentation
//
// swagger:model hashicorp.waypoint.Documentation
type HashicorpWaypointDocumentation struct {

	// description
	Description string `json:"description,omitempty"`

	// example
	Example string `json:"example,omitempty"`

	// fields
	Fields map[string]HashicorpWaypointDocumentationField `json:"fields,omitempty"`

	// input
	Input string `json:"input,omitempty"`

	// mappers
	Mappers []*HashicorpWaypointDocumentationMapper `json:"mappers"`

	// output
	Output string `json:"output,omitempty"`
}

// Validate validates this hashicorp waypoint documentation
func (m *HashicorpWaypointDocumentation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMappers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpWaypointDocumentation) validateFields(formats strfmt.Registry) error {
	if swag.IsZero(m.Fields) { // not required
		return nil
	}

	for k := range m.Fields {

		if err := validate.Required("fields"+"."+k, "body", m.Fields[k]); err != nil {
			return err
		}
		if val, ok := m.Fields[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fields" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fields" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *HashicorpWaypointDocumentation) validateMappers(formats strfmt.Registry) error {
	if swag.IsZero(m.Mappers) { // not required
		return nil
	}

	for i := 0; i < len(m.Mappers); i++ {
		if swag.IsZero(m.Mappers[i]) { // not required
			continue
		}

		if m.Mappers[i] != nil {
			if err := m.Mappers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mappers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mappers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this hashicorp waypoint documentation based on the context it is used
func (m *HashicorpWaypointDocumentation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMappers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpWaypointDocumentation) contextValidateFields(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Fields {

		if val, ok := m.Fields[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *HashicorpWaypointDocumentation) contextValidateMappers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Mappers); i++ {

		if m.Mappers[i] != nil {

			if swag.IsZero(m.Mappers[i]) { // not required
				return nil
			}

			if err := m.Mappers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mappers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("mappers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpWaypointDocumentation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpWaypointDocumentation) UnmarshalBinary(b []byte) error {
	var res HashicorpWaypointDocumentation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
