// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HashicorpWaypointJobTaskOverride hashicorp waypoint job task override
//
// swagger:model hashicorp.waypoint.Job.TaskOverride
type HashicorpWaypointJobTaskOverride struct {

	// Launch info for the task. The environment variables will be merged
	// with the defaults. If no OCI URL is specified, the ODR profile
	// settings are used.
	LaunchInfo *HashicorpWaypointTaskLaunchInfo `json:"launch_info,omitempty"`

	// If true, the operation will not be queued. This only works with
	// Noop operations out of safety. This is primarliy for tasks that
	// are NOT runners.
	SkipOperation bool `json:"skip_operation,omitempty"`
}

// Validate validates this hashicorp waypoint job task override
func (m *HashicorpWaypointJobTaskOverride) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLaunchInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpWaypointJobTaskOverride) validateLaunchInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.LaunchInfo) { // not required
		return nil
	}

	if m.LaunchInfo != nil {
		if err := m.LaunchInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("launch_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("launch_info")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hashicorp waypoint job task override based on the context it is used
func (m *HashicorpWaypointJobTaskOverride) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLaunchInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpWaypointJobTaskOverride) contextValidateLaunchInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.LaunchInfo != nil {

		if swag.IsZero(m.LaunchInfo) { // not required
			return nil
		}

		if err := m.LaunchInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("launch_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("launch_info")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpWaypointJobTaskOverride) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpWaypointJobTaskOverride) UnmarshalBinary(b []byte) error {
	var res HashicorpWaypointJobTaskOverride
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
