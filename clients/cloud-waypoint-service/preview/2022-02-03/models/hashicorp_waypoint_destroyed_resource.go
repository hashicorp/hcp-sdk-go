// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HashicorpWaypointDestroyedResource hashicorp waypoint destroyed resource
//
// swagger:model hashicorp.waypoint.DestroyedResource
type HashicorpWaypointDestroyedResource struct {

	// Unique name name for the resource. Usually derived from the platform. Required.
	Name string `json:"name,omitempty"`

	// The platform on which the resource should exist, i.e. docker, gcp, k8s, etc.
	Platform string `json:"platform,omitempty"`

	// Internal ResourceManager representation of the resource.
	State *OpaqueanyAny `json:"state,omitempty"`

	// Any additional information a plugin wants to expose on this resource.
	// EX: Availability zones on a load balancer, concurrency limit on a lambda function, etc.
	StateJSON string `json:"state_json,omitempty"`

	// platform-specific type of the resource type. i.e. instance, pod, auto-scaling group, etc
	Type string `json:"type,omitempty"`
}

// Validate validates this hashicorp waypoint destroyed resource
func (m *HashicorpWaypointDestroyedResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpWaypointDestroyedResource) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hashicorp waypoint destroyed resource based on the context it is used
func (m *HashicorpWaypointDestroyedResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpWaypointDestroyedResource) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {

		if swag.IsZero(m.State) { // not required
			return nil
		}

		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpWaypointDestroyedResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpWaypointDestroyedResource) UnmarshalBinary(b []byte) error {
	var res HashicorpWaypointDestroyedResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
