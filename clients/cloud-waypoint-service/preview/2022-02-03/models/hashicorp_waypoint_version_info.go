// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HashicorpWaypointVersionInfo hashicorp waypoint version info
//
// swagger:model hashicorp.waypoint.VersionInfo
type HashicorpWaypointVersionInfo struct {

	// api
	API *HashicorpWaypointVersionInfoProtocolVersion `json:"api,omitempty"`

	// entrypoint
	Entrypoint *HashicorpWaypointVersionInfoProtocolVersion `json:"entrypoint,omitempty"`

	// Full version string (semver-syntax). This may be hidden/blank for
	// security purposes so clients should gracefully handle blank values.
	Version string `json:"version,omitempty"`
}

// Validate validates this hashicorp waypoint version info
func (m *HashicorpWaypointVersionInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntrypoint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpWaypointVersionInfo) validateAPI(formats strfmt.Registry) error {
	if swag.IsZero(m.API) { // not required
		return nil
	}

	if m.API != nil {
		if err := m.API.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("api")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("api")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointVersionInfo) validateEntrypoint(formats strfmt.Registry) error {
	if swag.IsZero(m.Entrypoint) { // not required
		return nil
	}

	if m.Entrypoint != nil {
		if err := m.Entrypoint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entrypoint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entrypoint")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hashicorp waypoint version info based on the context it is used
func (m *HashicorpWaypointVersionInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAPI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntrypoint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpWaypointVersionInfo) contextValidateAPI(ctx context.Context, formats strfmt.Registry) error {

	if m.API != nil {

		if swag.IsZero(m.API) { // not required
			return nil
		}

		if err := m.API.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("api")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("api")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointVersionInfo) contextValidateEntrypoint(ctx context.Context, formats strfmt.Registry) error {

	if m.Entrypoint != nil {

		if swag.IsZero(m.Entrypoint) { // not required
			return nil
		}

		if err := m.Entrypoint.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("entrypoint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("entrypoint")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpWaypointVersionInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpWaypointVersionInfo) UnmarshalBinary(b []byte) error {
	var res HashicorpWaypointVersionInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
