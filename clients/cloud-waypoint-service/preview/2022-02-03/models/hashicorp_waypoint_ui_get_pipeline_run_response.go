// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HashicorpWaypointUIGetPipelineRunResponse hashicorp waypoint UI get pipeline run response
//
// swagger:model hashicorp.waypoint.UI.GetPipelineRunResponse
type HashicorpWaypointUIGetPipelineRunResponse struct {

	// deprecated in favor of pipeline_run_bundle.
	PipelineRun *HashicorpWaypointPipelineRun `json:"pipeline_run,omitempty"`

	// pipeline run bundle
	PipelineRunBundle *HashicorpWaypointUIPipelineRunBundle `json:"pipeline_run_bundle,omitempty"`

	// root tree node
	RootTreeNode *HashicorpWaypointUIPipelineRunTreeNode `json:"root_tree_node,omitempty"`
}

// Validate validates this hashicorp waypoint UI get pipeline run response
func (m *HashicorpWaypointUIGetPipelineRunResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePipelineRun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePipelineRunBundle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootTreeNode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpWaypointUIGetPipelineRunResponse) validatePipelineRun(formats strfmt.Registry) error {
	if swag.IsZero(m.PipelineRun) { // not required
		return nil
	}

	if m.PipelineRun != nil {
		if err := m.PipelineRun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pipeline_run")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pipeline_run")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointUIGetPipelineRunResponse) validatePipelineRunBundle(formats strfmt.Registry) error {
	if swag.IsZero(m.PipelineRunBundle) { // not required
		return nil
	}

	if m.PipelineRunBundle != nil {
		if err := m.PipelineRunBundle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pipeline_run_bundle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pipeline_run_bundle")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointUIGetPipelineRunResponse) validateRootTreeNode(formats strfmt.Registry) error {
	if swag.IsZero(m.RootTreeNode) { // not required
		return nil
	}

	if m.RootTreeNode != nil {
		if err := m.RootTreeNode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("root_tree_node")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("root_tree_node")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hashicorp waypoint UI get pipeline run response based on the context it is used
func (m *HashicorpWaypointUIGetPipelineRunResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePipelineRun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePipelineRunBundle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRootTreeNode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpWaypointUIGetPipelineRunResponse) contextValidatePipelineRun(ctx context.Context, formats strfmt.Registry) error {

	if m.PipelineRun != nil {

		if swag.IsZero(m.PipelineRun) { // not required
			return nil
		}

		if err := m.PipelineRun.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pipeline_run")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pipeline_run")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointUIGetPipelineRunResponse) contextValidatePipelineRunBundle(ctx context.Context, formats strfmt.Registry) error {

	if m.PipelineRunBundle != nil {

		if swag.IsZero(m.PipelineRunBundle) { // not required
			return nil
		}

		if err := m.PipelineRunBundle.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pipeline_run_bundle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pipeline_run_bundle")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointUIGetPipelineRunResponse) contextValidateRootTreeNode(ctx context.Context, formats strfmt.Registry) error {

	if m.RootTreeNode != nil {

		if swag.IsZero(m.RootTreeNode) { // not required
			return nil
		}

		if err := m.RootTreeNode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("root_tree_node")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("root_tree_node")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpWaypointUIGetPipelineRunResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpWaypointUIGetPipelineRunResponse) UnmarshalBinary(b []byte) error {
	var res HashicorpWaypointUIGetPipelineRunResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
