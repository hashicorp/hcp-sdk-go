// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HashicorpWaypointJobPollResult hashicorp waypoint job poll result
//
// swagger:model hashicorp.waypoint.Job.PollResult
type HashicorpWaypointJobPollResult struct {

	// This field will be non-empty if and only if polling resulted in
	// new data that needs to be deployed. This will be the ID of the job
	// that queues the "up" operation.
	JobID string `json:"job_id,omitempty"`

	// new ref
	NewRef *HashicorpWaypointJobDataSourceRef `json:"new_ref,omitempty"`

	// If the poll resulted in new data, old_ref and new_ref will contain
	// the two refs that were currently in use. These are nil if the polling
	// didn't find new data.
	OldRef *HashicorpWaypointJobDataSourceRef `json:"old_ref,omitempty"`
}

// Validate validates this hashicorp waypoint job poll result
func (m *HashicorpWaypointJobPollResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNewRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOldRef(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpWaypointJobPollResult) validateNewRef(formats strfmt.Registry) error {
	if swag.IsZero(m.NewRef) { // not required
		return nil
	}

	if m.NewRef != nil {
		if err := m.NewRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("new_ref")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("new_ref")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointJobPollResult) validateOldRef(formats strfmt.Registry) error {
	if swag.IsZero(m.OldRef) { // not required
		return nil
	}

	if m.OldRef != nil {
		if err := m.OldRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("old_ref")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("old_ref")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hashicorp waypoint job poll result based on the context it is used
func (m *HashicorpWaypointJobPollResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNewRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOldRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpWaypointJobPollResult) contextValidateNewRef(ctx context.Context, formats strfmt.Registry) error {

	if m.NewRef != nil {

		if swag.IsZero(m.NewRef) { // not required
			return nil
		}

		if err := m.NewRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("new_ref")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("new_ref")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointJobPollResult) contextValidateOldRef(ctx context.Context, formats strfmt.Registry) error {

	if m.OldRef != nil {

		if swag.IsZero(m.OldRef) { // not required
			return nil
		}

		if err := m.OldRef.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("old_ref")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("old_ref")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpWaypointJobPollResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpWaypointJobPollResult) UnmarshalBinary(b []byte) error {
	var res HashicorpWaypointJobPollResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
