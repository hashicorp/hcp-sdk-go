// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HashicorpWaypointGetLogStreamRequest hashicorp waypoint get log stream request
//
// swagger:model hashicorp.waypoint.GetLogStreamRequest
type HashicorpWaypointGetLogStreamRequest struct {

	// Logs for a specific application in a workspace.
	Application *HashicorpWaypointGetLogStreamRequestApplication `json:"application,omitempty"`

	// Deployment to request logs for.
	DeploymentID string `json:"deployment_id,omitempty"`

	// limit_backlog sets the maximum backlog lines to return on the initial
	// connection. This setting is per instance, not global. The maximum
	// backlog to expect is `n * limit_backlog` where n is the number of
	// instances.
	//
	// A negative value will not limit the backlog.
	//
	// A value of zero will default to a value of 50.
	LimitBacklog int32 `json:"limit_backlog,omitempty"`
}

// Validate validates this hashicorp waypoint get log stream request
func (m *HashicorpWaypointGetLogStreamRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplication(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpWaypointGetLogStreamRequest) validateApplication(formats strfmt.Registry) error {
	if swag.IsZero(m.Application) { // not required
		return nil
	}

	if m.Application != nil {
		if err := m.Application.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("application")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hashicorp waypoint get log stream request based on the context it is used
func (m *HashicorpWaypointGetLogStreamRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpWaypointGetLogStreamRequest) contextValidateApplication(ctx context.Context, formats strfmt.Registry) error {

	if m.Application != nil {

		if swag.IsZero(m.Application) { // not required
			return nil
		}

		if err := m.Application.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("application")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpWaypointGetLogStreamRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpWaypointGetLogStreamRequest) UnmarshalBinary(b []byte) error {
	var res HashicorpWaypointGetLogStreamRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
