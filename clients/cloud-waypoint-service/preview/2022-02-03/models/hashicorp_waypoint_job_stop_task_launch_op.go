// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HashicorpWaypointJobStopTaskLaunchOp hashicorp waypoint job stop task launch op
//
// swagger:model hashicorp.waypoint.Job.StopTaskLaunchOp
type HashicorpWaypointJobStopTaskLaunchOp struct {

	// The state can be directly provided.
	Direct *OpaqueanyAny `json:"direct,omitempty"`

	// Params is needed to spawn the plugin so we can send it the stop.
	Params *HashicorpWaypointJobTaskPluginParams `json:"params,omitempty"`

	// The state can be looked up from the result of a StartTask job.
	StartJobID string `json:"start_job_id,omitempty"`
}

// Validate validates this hashicorp waypoint job stop task launch op
func (m *HashicorpWaypointJobStopTaskLaunchOp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpWaypointJobStopTaskLaunchOp) validateDirect(formats strfmt.Registry) error {
	if swag.IsZero(m.Direct) { // not required
		return nil
	}

	if m.Direct != nil {
		if err := m.Direct.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("direct")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("direct")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointJobStopTaskLaunchOp) validateParams(formats strfmt.Registry) error {
	if swag.IsZero(m.Params) { // not required
		return nil
	}

	if m.Params != nil {
		if err := m.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("params")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hashicorp waypoint job stop task launch op based on the context it is used
func (m *HashicorpWaypointJobStopTaskLaunchOp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDirect(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpWaypointJobStopTaskLaunchOp) contextValidateDirect(ctx context.Context, formats strfmt.Registry) error {

	if m.Direct != nil {

		if swag.IsZero(m.Direct) { // not required
			return nil
		}

		if err := m.Direct.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("direct")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("direct")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointJobStopTaskLaunchOp) contextValidateParams(ctx context.Context, formats strfmt.Registry) error {

	if m.Params != nil {

		if swag.IsZero(m.Params) { // not required
			return nil
		}

		if err := m.Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpWaypointJobStopTaskLaunchOp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpWaypointJobStopTaskLaunchOp) UnmarshalBinary(b []byte) error {
	var res HashicorpWaypointJobStopTaskLaunchOp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
