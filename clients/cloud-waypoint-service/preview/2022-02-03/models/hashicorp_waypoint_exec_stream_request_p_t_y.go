// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HashicorpWaypointExecStreamRequestPTY hashicorp waypoint exec stream request p t y
//
// swagger:model hashicorp.waypoint.ExecStreamRequest.PTY
type HashicorpWaypointExecStreamRequestPTY struct {

	// enable
	Enable bool `json:"enable,omitempty"`

	// term is the TERM value to request on the remote side. This should be set.
	Term string `json:"term,omitempty"`

	// window_size is the initial window size
	WindowSize *HashicorpWaypointExecStreamRequestWindowSize `json:"window_size,omitempty"`
}

// Validate validates this hashicorp waypoint exec stream request p t y
func (m *HashicorpWaypointExecStreamRequestPTY) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWindowSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpWaypointExecStreamRequestPTY) validateWindowSize(formats strfmt.Registry) error {
	if swag.IsZero(m.WindowSize) { // not required
		return nil
	}

	if m.WindowSize != nil {
		if err := m.WindowSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("window_size")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("window_size")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hashicorp waypoint exec stream request p t y based on the context it is used
func (m *HashicorpWaypointExecStreamRequestPTY) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateWindowSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpWaypointExecStreamRequestPTY) contextValidateWindowSize(ctx context.Context, formats strfmt.Registry) error {

	if m.WindowSize != nil {

		if swag.IsZero(m.WindowSize) { // not required
			return nil
		}

		if err := m.WindowSize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("window_size")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("window_size")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpWaypointExecStreamRequestPTY) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpWaypointExecStreamRequestPTY) UnmarshalBinary(b []byte) error {
	var res HashicorpWaypointExecStreamRequestPTY
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
