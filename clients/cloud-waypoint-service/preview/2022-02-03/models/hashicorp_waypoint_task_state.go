// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// HashicorpWaypointTaskState hashicorp waypoint task state
//
// swagger:model hashicorp.waypoint.Task.State
type HashicorpWaypointTaskState string

func NewHashicorpWaypointTaskState(value HashicorpWaypointTaskState) *HashicorpWaypointTaskState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated HashicorpWaypointTaskState.
func (m HashicorpWaypointTaskState) Pointer() *HashicorpWaypointTaskState {
	return &m
}

const (

	// HashicorpWaypointTaskStateUNKNOWN captures enum value "UNKNOWN"
	HashicorpWaypointTaskStateUNKNOWN HashicorpWaypointTaskState = "UNKNOWN"

	// HashicorpWaypointTaskStatePENDING captures enum value "PENDING"
	HashicorpWaypointTaskStatePENDING HashicorpWaypointTaskState = "PENDING"

	// HashicorpWaypointTaskStateSTARTING captures enum value "STARTING"
	HashicorpWaypointTaskStateSTARTING HashicorpWaypointTaskState = "STARTING"

	// HashicorpWaypointTaskStateSTARTED captures enum value "STARTED"
	HashicorpWaypointTaskStateSTARTED HashicorpWaypointTaskState = "STARTED"

	// HashicorpWaypointTaskStateRUNNING captures enum value "RUNNING"
	HashicorpWaypointTaskStateRUNNING HashicorpWaypointTaskState = "RUNNING"

	// HashicorpWaypointTaskStateCOMPLETED captures enum value "COMPLETED"
	HashicorpWaypointTaskStateCOMPLETED HashicorpWaypointTaskState = "COMPLETED"

	// HashicorpWaypointTaskStateSTOPPING captures enum value "STOPPING"
	HashicorpWaypointTaskStateSTOPPING HashicorpWaypointTaskState = "STOPPING"

	// HashicorpWaypointTaskStateSTOPPED captures enum value "STOPPED"
	HashicorpWaypointTaskStateSTOPPED HashicorpWaypointTaskState = "STOPPED"

	// HashicorpWaypointTaskStateMIXED captures enum value "MIXED"
	HashicorpWaypointTaskStateMIXED HashicorpWaypointTaskState = "MIXED"
)

// for schema
var hashicorpWaypointTaskStateEnum []interface{}

func init() {
	var res []HashicorpWaypointTaskState
	if err := json.Unmarshal([]byte(`["UNKNOWN","PENDING","STARTING","STARTED","RUNNING","COMPLETED","STOPPING","STOPPED","MIXED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hashicorpWaypointTaskStateEnum = append(hashicorpWaypointTaskStateEnum, v)
	}
}

func (m HashicorpWaypointTaskState) validateHashicorpWaypointTaskStateEnum(path, location string, value HashicorpWaypointTaskState) error {
	if err := validate.EnumCase(path, location, value, hashicorpWaypointTaskStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this hashicorp waypoint task state
func (m HashicorpWaypointTaskState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateHashicorpWaypointTaskStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this hashicorp waypoint task state based on context it is used
func (m HashicorpWaypointTaskState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
