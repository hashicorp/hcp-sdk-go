// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// HashicorpWaypointStatusState hashicorp waypoint status state
//
// swagger:model hashicorp.waypoint.Status.State
type HashicorpWaypointStatusState string

func NewHashicorpWaypointStatusState(value HashicorpWaypointStatusState) *HashicorpWaypointStatusState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated HashicorpWaypointStatusState.
func (m HashicorpWaypointStatusState) Pointer() *HashicorpWaypointStatusState {
	return &m
}

const (

	// HashicorpWaypointStatusStateUNKNOWN captures enum value "UNKNOWN"
	HashicorpWaypointStatusStateUNKNOWN HashicorpWaypointStatusState = "UNKNOWN"

	// HashicorpWaypointStatusStateRUNNING captures enum value "RUNNING"
	HashicorpWaypointStatusStateRUNNING HashicorpWaypointStatusState = "RUNNING"

	// HashicorpWaypointStatusStateSUCCESS captures enum value "SUCCESS"
	HashicorpWaypointStatusStateSUCCESS HashicorpWaypointStatusState = "SUCCESS"

	// HashicorpWaypointStatusStateERROR captures enum value "ERROR"
	HashicorpWaypointStatusStateERROR HashicorpWaypointStatusState = "ERROR"
)

// for schema
var hashicorpWaypointStatusStateEnum []interface{}

func init() {
	var res []HashicorpWaypointStatusState
	if err := json.Unmarshal([]byte(`["UNKNOWN","RUNNING","SUCCESS","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hashicorpWaypointStatusStateEnum = append(hashicorpWaypointStatusStateEnum, v)
	}
}

func (m HashicorpWaypointStatusState) validateHashicorpWaypointStatusStateEnum(path, location string, value HashicorpWaypointStatusState) error {
	if err := validate.EnumCase(path, location, value, hashicorpWaypointStatusStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this hashicorp waypoint status state
func (m HashicorpWaypointStatusState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateHashicorpWaypointStatusStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this hashicorp waypoint status state based on context it is used
func (m HashicorpWaypointStatusState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
