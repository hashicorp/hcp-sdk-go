// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HashicorpWaypointUIPipelineRunTreeNode hashicorp waypoint UI pipeline run tree node
//
// swagger:model hashicorp.waypoint.UI.PipelineRunTreeNode
type HashicorpWaypointUIPipelineRunTreeNode struct {

	// application
	Application *HashicorpWaypointRefApplication `json:"application,omitempty"`

	// children
	Children *HashicorpWaypointUIPipelineRunTreeNodeChildren `json:"children,omitempty"`

	// complete time
	// Format: date-time
	CompleteTime strfmt.DateTime `json:"complete_time,omitempty"`

	// job
	Job *HashicorpWaypointRefJob `json:"job,omitempty"`

	// latest status report
	LatestStatusReport *HashicorpWaypointStatusReport `json:"latest_status_report,omitempty"`

	// result
	Result *HashicorpWaypointJobResult `json:"result,omitempty"`

	// start time
	// Format: date-time
	StartTime strfmt.DateTime `json:"start_time,omitempty"`

	// state
	State *HashicorpWaypointUIPipelineRunTreeNodeState `json:"state,omitempty"`

	// If step is absent then the node is “virtual” — it represents a set of
	// concurrent steps/jobs.
	Step *HashicorpWaypointPipelineStep `json:"step,omitempty"`

	// workspace
	Workspace *HashicorpWaypointRefWorkspace `json:"workspace,omitempty"`
}

// Validate validates this hashicorp waypoint UI pipeline run tree node
func (m *HashicorpWaypointUIPipelineRunTreeNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChildren(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompleteTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatestStatusReport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStep(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkspace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpWaypointUIPipelineRunTreeNode) validateApplication(formats strfmt.Registry) error {
	if swag.IsZero(m.Application) { // not required
		return nil
	}

	if m.Application != nil {
		if err := m.Application.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("application")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointUIPipelineRunTreeNode) validateChildren(formats strfmt.Registry) error {
	if swag.IsZero(m.Children) { // not required
		return nil
	}

	if m.Children != nil {
		if err := m.Children.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("children")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("children")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointUIPipelineRunTreeNode) validateCompleteTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CompleteTime) { // not required
		return nil
	}

	if err := validate.FormatOf("complete_time", "body", "date-time", m.CompleteTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *HashicorpWaypointUIPipelineRunTreeNode) validateJob(formats strfmt.Registry) error {
	if swag.IsZero(m.Job) { // not required
		return nil
	}

	if m.Job != nil {
		if err := m.Job.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("job")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("job")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointUIPipelineRunTreeNode) validateLatestStatusReport(formats strfmt.Registry) error {
	if swag.IsZero(m.LatestStatusReport) { // not required
		return nil
	}

	if m.LatestStatusReport != nil {
		if err := m.LatestStatusReport.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latest_status_report")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("latest_status_report")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointUIPipelineRunTreeNode) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(m.Result) { // not required
		return nil
	}

	if m.Result != nil {
		if err := m.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointUIPipelineRunTreeNode) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("start_time", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *HashicorpWaypointUIPipelineRunTreeNode) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	if m.State != nil {
		if err := m.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointUIPipelineRunTreeNode) validateStep(formats strfmt.Registry) error {
	if swag.IsZero(m.Step) { // not required
		return nil
	}

	if m.Step != nil {
		if err := m.Step.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("step")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("step")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointUIPipelineRunTreeNode) validateWorkspace(formats strfmt.Registry) error {
	if swag.IsZero(m.Workspace) { // not required
		return nil
	}

	if m.Workspace != nil {
		if err := m.Workspace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workspace")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workspace")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hashicorp waypoint UI pipeline run tree node based on the context it is used
func (m *HashicorpWaypointUIPipelineRunTreeNode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChildren(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJob(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLatestStatusReport(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStep(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWorkspace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpWaypointUIPipelineRunTreeNode) contextValidateApplication(ctx context.Context, formats strfmt.Registry) error {

	if m.Application != nil {

		if swag.IsZero(m.Application) { // not required
			return nil
		}

		if err := m.Application.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("application")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointUIPipelineRunTreeNode) contextValidateChildren(ctx context.Context, formats strfmt.Registry) error {

	if m.Children != nil {

		if swag.IsZero(m.Children) { // not required
			return nil
		}

		if err := m.Children.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("children")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("children")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointUIPipelineRunTreeNode) contextValidateJob(ctx context.Context, formats strfmt.Registry) error {

	if m.Job != nil {

		if swag.IsZero(m.Job) { // not required
			return nil
		}

		if err := m.Job.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("job")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("job")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointUIPipelineRunTreeNode) contextValidateLatestStatusReport(ctx context.Context, formats strfmt.Registry) error {

	if m.LatestStatusReport != nil {

		if swag.IsZero(m.LatestStatusReport) { // not required
			return nil
		}

		if err := m.LatestStatusReport.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latest_status_report")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("latest_status_report")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointUIPipelineRunTreeNode) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {

	if m.Result != nil {

		if swag.IsZero(m.Result) { // not required
			return nil
		}

		if err := m.Result.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointUIPipelineRunTreeNode) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if m.State != nil {

		if swag.IsZero(m.State) { // not required
			return nil
		}

		if err := m.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("state")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("state")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointUIPipelineRunTreeNode) contextValidateStep(ctx context.Context, formats strfmt.Registry) error {

	if m.Step != nil {

		if swag.IsZero(m.Step) { // not required
			return nil
		}

		if err := m.Step.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("step")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("step")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpWaypointUIPipelineRunTreeNode) contextValidateWorkspace(ctx context.Context, formats strfmt.Registry) error {

	if m.Workspace != nil {

		if swag.IsZero(m.Workspace) { // not required
			return nil
		}

		if err := m.Workspace.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workspace")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("workspace")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpWaypointUIPipelineRunTreeNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpWaypointUIPipelineRunTreeNode) UnmarshalBinary(b []byte) error {
	var res HashicorpWaypointUIPipelineRunTreeNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
