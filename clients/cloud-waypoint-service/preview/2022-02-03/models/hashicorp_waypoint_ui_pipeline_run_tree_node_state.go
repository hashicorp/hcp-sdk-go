// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// HashicorpWaypointUIPipelineRunTreeNodeState hashicorp waypoint UI pipeline run tree node state
//
// swagger:model hashicorp.waypoint.UI.PipelineRunTreeNode.State
type HashicorpWaypointUIPipelineRunTreeNodeState string

func NewHashicorpWaypointUIPipelineRunTreeNodeState(value HashicorpWaypointUIPipelineRunTreeNodeState) *HashicorpWaypointUIPipelineRunTreeNodeState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated HashicorpWaypointUIPipelineRunTreeNodeState.
func (m HashicorpWaypointUIPipelineRunTreeNodeState) Pointer() *HashicorpWaypointUIPipelineRunTreeNodeState {
	return &m
}

const (

	// HashicorpWaypointUIPipelineRunTreeNodeStateUNKNOWN captures enum value "UNKNOWN"
	HashicorpWaypointUIPipelineRunTreeNodeStateUNKNOWN HashicorpWaypointUIPipelineRunTreeNodeState = "UNKNOWN"

	// HashicorpWaypointUIPipelineRunTreeNodeStateQUEUED captures enum value "QUEUED"
	HashicorpWaypointUIPipelineRunTreeNodeStateQUEUED HashicorpWaypointUIPipelineRunTreeNodeState = "QUEUED"

	// HashicorpWaypointUIPipelineRunTreeNodeStateRUNNING captures enum value "RUNNING"
	HashicorpWaypointUIPipelineRunTreeNodeStateRUNNING HashicorpWaypointUIPipelineRunTreeNodeState = "RUNNING"

	// HashicorpWaypointUIPipelineRunTreeNodeStateERROR captures enum value "ERROR"
	HashicorpWaypointUIPipelineRunTreeNodeStateERROR HashicorpWaypointUIPipelineRunTreeNodeState = "ERROR"

	// HashicorpWaypointUIPipelineRunTreeNodeStateCANCELLED captures enum value "CANCELLED"
	HashicorpWaypointUIPipelineRunTreeNodeStateCANCELLED HashicorpWaypointUIPipelineRunTreeNodeState = "CANCELLED"

	// HashicorpWaypointUIPipelineRunTreeNodeStateSUCCESS captures enum value "SUCCESS"
	HashicorpWaypointUIPipelineRunTreeNodeStateSUCCESS HashicorpWaypointUIPipelineRunTreeNodeState = "SUCCESS"
)

// for schema
var hashicorpWaypointUiPipelineRunTreeNodeStateEnum []interface{}

func init() {
	var res []HashicorpWaypointUIPipelineRunTreeNodeState
	if err := json.Unmarshal([]byte(`["UNKNOWN","QUEUED","RUNNING","ERROR","CANCELLED","SUCCESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hashicorpWaypointUiPipelineRunTreeNodeStateEnum = append(hashicorpWaypointUiPipelineRunTreeNodeStateEnum, v)
	}
}

func (m HashicorpWaypointUIPipelineRunTreeNodeState) validateHashicorpWaypointUIPipelineRunTreeNodeStateEnum(path, location string, value HashicorpWaypointUIPipelineRunTreeNodeState) error {
	if err := validate.EnumCase(path, location, value, hashicorpWaypointUiPipelineRunTreeNodeStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this hashicorp waypoint UI pipeline run tree node state
func (m HashicorpWaypointUIPipelineRunTreeNodeState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateHashicorpWaypointUIPipelineRunTreeNodeStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this hashicorp waypoint UI pipeline run tree node state based on context it is used
func (m HashicorpWaypointUIPipelineRunTreeNodeState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
