// Code generated by go-swagger; DO NOT EDIT.

package terraform_cloud_config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new terraform cloud config API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for terraform cloud config API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	TerraformCloudConfigCreateTFCConfig(params *TerraformCloudConfigCreateTFCConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TerraformCloudConfigCreateTFCConfigOK, error)

	TerraformCloudConfigDeleteTFCConfig(params *TerraformCloudConfigDeleteTFCConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TerraformCloudConfigDeleteTFCConfigOK, error)

	TerraformCloudConfigGetTFCConfig(params *TerraformCloudConfigGetTFCConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TerraformCloudConfigGetTFCConfigOK, error)

	TerraformCloudConfigListNoCodeModules(params *TerraformCloudConfigListNoCodeModulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TerraformCloudConfigListNoCodeModulesOK, error)

	TerraformCloudConfigListTFCProjects(params *TerraformCloudConfigListTFCProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TerraformCloudConfigListTFCProjectsOK, error)

	TerraformCloudConfigSetTFCConfig(params *TerraformCloudConfigSetTFCConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TerraformCloudConfigSetTFCConfigOK, error)

	TerraformCloudConfigUpdateTFCConfig(params *TerraformCloudConfigUpdateTFCConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TerraformCloudConfigUpdateTFCConfigOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
TerraformCloudConfigCreateTFCConfig bs e t a create t f c config creates a terraform cloud configuration
*/
func (a *Client) TerraformCloudConfigCreateTFCConfig(params *TerraformCloudConfigCreateTFCConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TerraformCloudConfigCreateTFCConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTerraformCloudConfigCreateTFCConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TerraformCloudConfig_CreateTFCConfig",
		Method:             "POST",
		PathPattern:        "/waypoint/2022-02-03/namespace/{namespace_id}/tfcconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TerraformCloudConfigCreateTFCConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TerraformCloudConfigCreateTFCConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TerraformCloudConfigCreateTFCConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TerraformCloudConfigDeleteTFCConfig deletes t f c config deletes a terraform configuration
*/
func (a *Client) TerraformCloudConfigDeleteTFCConfig(params *TerraformCloudConfigDeleteTFCConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TerraformCloudConfigDeleteTFCConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTerraformCloudConfigDeleteTFCConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TerraformCloudConfig_DeleteTFCConfig",
		Method:             "DELETE",
		PathPattern:        "/waypoint/2022-02-03/namespace/{namespace_id}/tfcconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TerraformCloudConfigDeleteTFCConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TerraformCloudConfigDeleteTFCConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TerraformCloudConfigDeleteTFCConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TerraformCloudConfigGetTFCConfig bs e t a get t f c config gets the server stored terraform cloud config
*/
func (a *Client) TerraformCloudConfigGetTFCConfig(params *TerraformCloudConfigGetTFCConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TerraformCloudConfigGetTFCConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTerraformCloudConfigGetTFCConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TerraformCloudConfig_GetTFCConfig",
		Method:             "GET",
		PathPattern:        "/waypoint/2022-02-03/namespace/{namespace_id}/tfcconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TerraformCloudConfigGetTFCConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TerraformCloudConfigGetTFCConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TerraformCloudConfigGetTFCConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TerraformCloudConfigListNoCodeModules terraform cloud config list no code modules API
*/
func (a *Client) TerraformCloudConfigListNoCodeModules(params *TerraformCloudConfigListNoCodeModulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TerraformCloudConfigListNoCodeModulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTerraformCloudConfigListNoCodeModulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TerraformCloudConfig_ListNoCodeModules",
		Method:             "GET",
		PathPattern:        "/waypoint/2022-02-03/namespace/{namespace_id}/tfmodules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TerraformCloudConfigListNoCodeModulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TerraformCloudConfigListNoCodeModulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TerraformCloudConfigListNoCodeModulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TerraformCloudConfigListTFCProjects terraform cloud config list t f c projects API
*/
func (a *Client) TerraformCloudConfigListTFCProjects(params *TerraformCloudConfigListTFCProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TerraformCloudConfigListTFCProjectsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTerraformCloudConfigListTFCProjectsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TerraformCloudConfig_ListTFCProjects",
		Method:             "GET",
		PathPattern:        "/waypoint/2022-02-03/namespace/{namespace_id}/tfcprojects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TerraformCloudConfigListTFCProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TerraformCloudConfigListTFCProjectsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TerraformCloudConfigListTFCProjectsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TerraformCloudConfigSetTFCConfig ds e p r e c a t e d set t f c config sets server stored terraform cloud config
*/
func (a *Client) TerraformCloudConfigSetTFCConfig(params *TerraformCloudConfigSetTFCConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TerraformCloudConfigSetTFCConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTerraformCloudConfigSetTFCConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TerraformCloudConfig_SetTFCConfig",
		Method:             "PUT",
		PathPattern:        "/waypoint/2022-02-03/namespace/{namespace_id}/tfcconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TerraformCloudConfigSetTFCConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TerraformCloudConfigSetTFCConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TerraformCloudConfigSetTFCConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TerraformCloudConfigUpdateTFCConfig bs e t a update t f c config updates a terraform cloud configuration
*/
func (a *Client) TerraformCloudConfigUpdateTFCConfig(params *TerraformCloudConfigUpdateTFCConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TerraformCloudConfigUpdateTFCConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTerraformCloudConfigUpdateTFCConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TerraformCloudConfig_UpdateTFCConfig",
		Method:             "PATCH",
		PathPattern:        "/waypoint/2022-02-03/namespace/{namespace_id}/tfcconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TerraformCloudConfigUpdateTFCConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TerraformCloudConfigUpdateTFCConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TerraformCloudConfigUpdateTFCConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
