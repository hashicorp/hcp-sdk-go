// Code generated by go-swagger; DO NOT EDIT.

package github_control_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new github control service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for github control service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GithubControlServiceIssuePick(params *GithubControlServiceIssuePickParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GithubControlServiceIssuePickOK, error)

	GithubControlServiceLogin(params *GithubControlServiceLoginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GithubControlServiceLoginOK, error)

	GithubControlServiceOAuthCallback(params *GithubControlServiceOAuthCallbackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GithubControlServiceOAuthCallbackOK, error)

	GithubControlServicePickInstallation(params *GithubControlServicePickInstallationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GithubControlServicePickInstallationOK, error)

	GithubControlServicePickRepo(params *GithubControlServicePickRepoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GithubControlServicePickRepoOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GithubControlServiceIssuePick github control service issue pick API
*/
func (a *Client) GithubControlServiceIssuePick(params *GithubControlServiceIssuePickParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GithubControlServiceIssuePickOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGithubControlServiceIssuePickParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GithubControlService_IssuePick",
		Method:             "GET",
		PathPattern:        "/waypoint/2022-04-21/github/pick/issue",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GithubControlServiceIssuePickReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GithubControlServiceIssuePickOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GithubControlServiceIssuePickDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GithubControlServiceLogin creates namespaces creates an h c p github namespaces and start billing for it
*/
func (a *Client) GithubControlServiceLogin(params *GithubControlServiceLoginParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GithubControlServiceLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGithubControlServiceLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GithubControlService_Login",
		Method:             "GET",
		PathPattern:        "/waypoint/2022-04-21/github/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GithubControlServiceLoginReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GithubControlServiceLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GithubControlServiceLoginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GithubControlServiceOAuthCallback gets namespace returns the namespace for the h c p organization project combo this automatically creates the namespace if it doesn t yet exist
*/
func (a *Client) GithubControlServiceOAuthCallback(params *GithubControlServiceOAuthCallbackParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GithubControlServiceOAuthCallbackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGithubControlServiceOAuthCallbackParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GithubControlService_OAuthCallback",
		Method:             "GET",
		PathPattern:        "/waypoint/2022-04-21/github/callback.json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GithubControlServiceOAuthCallbackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GithubControlServiceOAuthCallbackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GithubControlServiceOAuthCallbackDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GithubControlServicePickInstallation github control service pick installation API
*/
func (a *Client) GithubControlServicePickInstallation(params *GithubControlServicePickInstallationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GithubControlServicePickInstallationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGithubControlServicePickInstallationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GithubControlService_PickInstallation",
		Method:             "GET",
		PathPattern:        "/waypoint/2022-04-21/github/pick/install",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GithubControlServicePickInstallationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GithubControlServicePickInstallationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GithubControlServicePickInstallationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GithubControlServicePickRepo github control service pick repo API
*/
func (a *Client) GithubControlServicePickRepo(params *GithubControlServicePickRepoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GithubControlServicePickRepoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGithubControlServicePickRepoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GithubControlService_PickRepo",
		Method:             "GET",
		PathPattern:        "/waypoint/2022-04-21/github/pick/repo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GithubControlServicePickRepoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GithubControlServicePickRepoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GithubControlServicePickRepoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
