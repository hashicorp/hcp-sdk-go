// Code generated by go-swagger; DO NOT EDIT.

package github_control_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	cloud "github.com/hashicorp/hcp-sdk-go/clients/cloud-shared/v1/models"
	"github.com/hashicorp/hcp-sdk-go/clients/cloud-waypoint-service/preview/2022-02-03/models"
)

// GithubControlServiceIssuePickReader is a Reader for the GithubControlServiceIssuePick structure.
type GithubControlServiceIssuePickReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GithubControlServiceIssuePickReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGithubControlServiceIssuePickOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGithubControlServiceIssuePickDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGithubControlServiceIssuePickOK creates a GithubControlServiceIssuePickOK with default headers values
func NewGithubControlServiceIssuePickOK() *GithubControlServiceIssuePickOK {
	return &GithubControlServiceIssuePickOK{}
}

/*
GithubControlServiceIssuePickOK describes a response with status code 200, with default header values.

A successful response.
*/
type GithubControlServiceIssuePickOK struct {
	Payload *models.HashicorpCloudWaypointIssuePickResponse
}

// IsSuccess returns true when this github control service issue pick o k response has a 2xx status code
func (o *GithubControlServiceIssuePickOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this github control service issue pick o k response has a 3xx status code
func (o *GithubControlServiceIssuePickOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this github control service issue pick o k response has a 4xx status code
func (o *GithubControlServiceIssuePickOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this github control service issue pick o k response has a 5xx status code
func (o *GithubControlServiceIssuePickOK) IsServerError() bool {
	return false
}

// IsCode returns true when this github control service issue pick o k response a status code equal to that given
func (o *GithubControlServiceIssuePickOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the github control service issue pick o k response
func (o *GithubControlServiceIssuePickOK) Code() int {
	return 200
}

func (o *GithubControlServiceIssuePickOK) Error() string {
	return fmt.Sprintf("[GET /waypoint/2022-04-21/github/pick/issue][%d] githubControlServiceIssuePickOK  %+v", 200, o.Payload)
}

func (o *GithubControlServiceIssuePickOK) String() string {
	return fmt.Sprintf("[GET /waypoint/2022-04-21/github/pick/issue][%d] githubControlServiceIssuePickOK  %+v", 200, o.Payload)
}

func (o *GithubControlServiceIssuePickOK) GetPayload() *models.HashicorpCloudWaypointIssuePickResponse {
	return o.Payload
}

func (o *GithubControlServiceIssuePickOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HashicorpCloudWaypointIssuePickResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGithubControlServiceIssuePickDefault creates a GithubControlServiceIssuePickDefault with default headers values
func NewGithubControlServiceIssuePickDefault(code int) *GithubControlServiceIssuePickDefault {
	return &GithubControlServiceIssuePickDefault{
		_statusCode: code,
	}
}

/*
GithubControlServiceIssuePickDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type GithubControlServiceIssuePickDefault struct {
	_statusCode int

	Payload *cloud.GrpcGatewayRuntimeError
}

// IsSuccess returns true when this github control service issue pick default response has a 2xx status code
func (o *GithubControlServiceIssuePickDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this github control service issue pick default response has a 3xx status code
func (o *GithubControlServiceIssuePickDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this github control service issue pick default response has a 4xx status code
func (o *GithubControlServiceIssuePickDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this github control service issue pick default response has a 5xx status code
func (o *GithubControlServiceIssuePickDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this github control service issue pick default response a status code equal to that given
func (o *GithubControlServiceIssuePickDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the github control service issue pick default response
func (o *GithubControlServiceIssuePickDefault) Code() int {
	return o._statusCode
}

func (o *GithubControlServiceIssuePickDefault) Error() string {
	return fmt.Sprintf("[GET /waypoint/2022-04-21/github/pick/issue][%d] GithubControlService_IssuePick default  %+v", o._statusCode, o.Payload)
}

func (o *GithubControlServiceIssuePickDefault) String() string {
	return fmt.Sprintf("[GET /waypoint/2022-04-21/github/pick/issue][%d] GithubControlService_IssuePick default  %+v", o._statusCode, o.Payload)
}

func (o *GithubControlServiceIssuePickDefault) GetPayload() *cloud.GrpcGatewayRuntimeError {
	return o.Payload
}

func (o *GithubControlServiceIssuePickDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(cloud.GrpcGatewayRuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
