// Code generated by go-swagger; DO NOT EDIT.

package action

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewActionDeleteActionConfigParams creates a new ActionDeleteActionConfigParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewActionDeleteActionConfigParams() *ActionDeleteActionConfigParams {
	return &ActionDeleteActionConfigParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewActionDeleteActionConfigParamsWithTimeout creates a new ActionDeleteActionConfigParams object
// with the ability to set a timeout on a request.
func NewActionDeleteActionConfigParamsWithTimeout(timeout time.Duration) *ActionDeleteActionConfigParams {
	return &ActionDeleteActionConfigParams{
		timeout: timeout,
	}
}

// NewActionDeleteActionConfigParamsWithContext creates a new ActionDeleteActionConfigParams object
// with the ability to set a context for a request.
func NewActionDeleteActionConfigParamsWithContext(ctx context.Context) *ActionDeleteActionConfigParams {
	return &ActionDeleteActionConfigParams{
		Context: ctx,
	}
}

// NewActionDeleteActionConfigParamsWithHTTPClient creates a new ActionDeleteActionConfigParams object
// with the ability to set a custom HTTPClient for a request.
func NewActionDeleteActionConfigParamsWithHTTPClient(client *http.Client) *ActionDeleteActionConfigParams {
	return &ActionDeleteActionConfigParams{
		HTTPClient: client,
	}
}

/*
ActionDeleteActionConfigParams contains all the parameters to send to the API endpoint

	for the action delete action config operation.

	Typically these are written to a http.Request.
*/
type ActionDeleteActionConfigParams struct {

	/* ActionID.

	   The id of the action config being deleted.
	*/
	ActionID *string

	/* ActionName.

	   The name of the action being deleted (will only be used if id not provided).
	*/
	ActionName *string

	/* NamespaceID.

	   The namespace the action to be deleted in
	*/
	NamespaceID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the action delete action config params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ActionDeleteActionConfigParams) WithDefaults() *ActionDeleteActionConfigParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the action delete action config params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ActionDeleteActionConfigParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the action delete action config params
func (o *ActionDeleteActionConfigParams) WithTimeout(timeout time.Duration) *ActionDeleteActionConfigParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the action delete action config params
func (o *ActionDeleteActionConfigParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the action delete action config params
func (o *ActionDeleteActionConfigParams) WithContext(ctx context.Context) *ActionDeleteActionConfigParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the action delete action config params
func (o *ActionDeleteActionConfigParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the action delete action config params
func (o *ActionDeleteActionConfigParams) WithHTTPClient(client *http.Client) *ActionDeleteActionConfigParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the action delete action config params
func (o *ActionDeleteActionConfigParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActionID adds the actionID to the action delete action config params
func (o *ActionDeleteActionConfigParams) WithActionID(actionID *string) *ActionDeleteActionConfigParams {
	o.SetActionID(actionID)
	return o
}

// SetActionID adds the actionId to the action delete action config params
func (o *ActionDeleteActionConfigParams) SetActionID(actionID *string) {
	o.ActionID = actionID
}

// WithActionName adds the actionName to the action delete action config params
func (o *ActionDeleteActionConfigParams) WithActionName(actionName *string) *ActionDeleteActionConfigParams {
	o.SetActionName(actionName)
	return o
}

// SetActionName adds the actionName to the action delete action config params
func (o *ActionDeleteActionConfigParams) SetActionName(actionName *string) {
	o.ActionName = actionName
}

// WithNamespaceID adds the namespaceID to the action delete action config params
func (o *ActionDeleteActionConfigParams) WithNamespaceID(namespaceID string) *ActionDeleteActionConfigParams {
	o.SetNamespaceID(namespaceID)
	return o
}

// SetNamespaceID adds the namespaceId to the action delete action config params
func (o *ActionDeleteActionConfigParams) SetNamespaceID(namespaceID string) {
	o.NamespaceID = namespaceID
}

// WriteToRequest writes these params to a swagger request
func (o *ActionDeleteActionConfigParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ActionID != nil {

		// query param action_id
		var qrActionID string

		if o.ActionID != nil {
			qrActionID = *o.ActionID
		}
		qActionID := qrActionID
		if qActionID != "" {

			if err := r.SetQueryParam("action_id", qActionID); err != nil {
				return err
			}
		}
	}

	if o.ActionName != nil {

		// query param action_name
		var qrActionName string

		if o.ActionName != nil {
			qrActionName = *o.ActionName
		}
		qActionName := qrActionName
		if qActionName != "" {

			if err := r.SetQueryParam("action_name", qActionName); err != nil {
				return err
			}
		}
	}

	// path param namespace_id
	if err := r.SetPathParam("namespace_id", o.NamespaceID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
