// Code generated by go-swagger; DO NOT EDIT.

package action

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new action API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for action API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ActionCreateActionConfig(params *ActionCreateActionConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionCreateActionConfigOK, error)

	ActionDeleteActionConfig(params *ActionDeleteActionConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionDeleteActionConfigOK, error)

	ActionGetActionConfig(params *ActionGetActionConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionGetActionConfigOK, error)

	ActionListActionConfigs(params *ActionListActionConfigsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionListActionConfigsOK, error)

	ActionListActionRuns(params *ActionListActionRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionListActionRunsOK, error)

	ActionRunAction(params *ActionRunActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionRunActionOK, error)

	ActionSendStatusLog(params *ActionSendStatusLogParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionSendStatusLogOK, error)

	ActionUpdateActionConfig(params *ActionUpdateActionConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionUpdateActionConfigOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ActionCreateActionConfig action create action config API
*/
func (a *Client) ActionCreateActionConfig(params *ActionCreateActionConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionCreateActionConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionCreateActionConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Action_CreateActionConfig",
		Method:             "POST",
		PathPattern:        "/waypoint/2022-02-03/namespace/{namespace_id}/actionconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ActionCreateActionConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionCreateActionConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionCreateActionConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ActionDeleteActionConfig action delete action config API
*/
func (a *Client) ActionDeleteActionConfig(params *ActionDeleteActionConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionDeleteActionConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionDeleteActionConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Action_DeleteActionConfig",
		Method:             "DELETE",
		PathPattern:        "/waypoint/2022-02-03/namespace/{namespace_id}/actionconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ActionDeleteActionConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionDeleteActionConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionDeleteActionConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ActionGetActionConfig configs endpoints
*/
func (a *Client) ActionGetActionConfig(params *ActionGetActionConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionGetActionConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionGetActionConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Action_GetActionConfig",
		Method:             "GET",
		PathPattern:        "/waypoint/2022-02-03/namespace/{namespace_id}/actionconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ActionGetActionConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionGetActionConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionGetActionConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ActionListActionConfigs action list action configs API
*/
func (a *Client) ActionListActionConfigs(params *ActionListActionConfigsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionListActionConfigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionListActionConfigsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Action_ListActionConfigs",
		Method:             "GET",
		PathPattern:        "/waypoint/2022-02-03/namespace/{namespace_id}/actionconfigs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ActionListActionConfigsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionListActionConfigsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionListActionConfigsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ActionListActionRuns action list action runs API
*/
func (a *Client) ActionListActionRuns(params *ActionListActionRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionListActionRunsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionListActionRunsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Action_ListActionRuns",
		Method:             "GET",
		PathPattern:        "/waypoint/2022-02-03/namespace/{namespace_id}/actionruns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ActionListActionRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionListActionRunsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionListActionRunsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ActionRunAction runnings actions
*/
func (a *Client) ActionRunAction(params *ActionRunActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionRunActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionRunActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Action_RunAction",
		Method:             "PUT",
		PathPattern:        "/waypoint/2022-02-03/namespace/{namespace_id}/action",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ActionRunActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionRunActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionRunActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ActionSendStatusLog statuses logs for action runs
*/
func (a *Client) ActionSendStatusLog(params *ActionSendStatusLogParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionSendStatusLogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionSendStatusLogParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Action_SendStatusLog",
		Method:             "POST",
		PathPattern:        "/waypoint/2022-02-03/namespace/{namespace_id}/action/{action_config.id}/action-runs/{action_run_seq}/status-log",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ActionSendStatusLogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionSendStatusLogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionSendStatusLogDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ActionUpdateActionConfig action update action config API
*/
func (a *Client) ActionUpdateActionConfig(params *ActionUpdateActionConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionUpdateActionConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionUpdateActionConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Action_UpdateActionConfig",
		Method:             "PATCH",
		PathPattern:        "/waypoint/2022-02-03/namespace/{namespace_id}/actionconfig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ActionUpdateActionConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionUpdateActionConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionUpdateActionConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
