// Code generated by go-swagger; DO NOT EDIT.

package waypoint_control_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	cloud "github.com/hashicorp/hcp-sdk-go/clients/cloud-shared/v1/models"
	"github.com/hashicorp/hcp-sdk-go/clients/cloud-waypoint-service/preview/2022-02-03/models"
)

// WaypointControlServiceDetachGithubReader is a Reader for the WaypointControlServiceDetachGithub structure.
type WaypointControlServiceDetachGithubReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WaypointControlServiceDetachGithubReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewWaypointControlServiceDetachGithubOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewWaypointControlServiceDetachGithubDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewWaypointControlServiceDetachGithubOK creates a WaypointControlServiceDetachGithubOK with default headers values
func NewWaypointControlServiceDetachGithubOK() *WaypointControlServiceDetachGithubOK {
	return &WaypointControlServiceDetachGithubOK{}
}

/*
WaypointControlServiceDetachGithubOK describes a response with status code 200, with default header values.

A successful response.
*/
type WaypointControlServiceDetachGithubOK struct {
	Payload models.HashicorpCloudWaypointDetachGithubResponse
}

// IsSuccess returns true when this waypoint control service detach github o k response has a 2xx status code
func (o *WaypointControlServiceDetachGithubOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this waypoint control service detach github o k response has a 3xx status code
func (o *WaypointControlServiceDetachGithubOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this waypoint control service detach github o k response has a 4xx status code
func (o *WaypointControlServiceDetachGithubOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this waypoint control service detach github o k response has a 5xx status code
func (o *WaypointControlServiceDetachGithubOK) IsServerError() bool {
	return false
}

// IsCode returns true when this waypoint control service detach github o k response a status code equal to that given
func (o *WaypointControlServiceDetachGithubOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the waypoint control service detach github o k response
func (o *WaypointControlServiceDetachGithubOK) Code() int {
	return 200
}

func (o *WaypointControlServiceDetachGithubOK) Error() string {
	return fmt.Sprintf("[GET /waypoint/2022-02-03/namespace/{namespace_id}/detach-github][%d] waypointControlServiceDetachGithubOK  %+v", 200, o.Payload)
}

func (o *WaypointControlServiceDetachGithubOK) String() string {
	return fmt.Sprintf("[GET /waypoint/2022-02-03/namespace/{namespace_id}/detach-github][%d] waypointControlServiceDetachGithubOK  %+v", 200, o.Payload)
}

func (o *WaypointControlServiceDetachGithubOK) GetPayload() models.HashicorpCloudWaypointDetachGithubResponse {
	return o.Payload
}

func (o *WaypointControlServiceDetachGithubOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWaypointControlServiceDetachGithubDefault creates a WaypointControlServiceDetachGithubDefault with default headers values
func NewWaypointControlServiceDetachGithubDefault(code int) *WaypointControlServiceDetachGithubDefault {
	return &WaypointControlServiceDetachGithubDefault{
		_statusCode: code,
	}
}

/*
WaypointControlServiceDetachGithubDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type WaypointControlServiceDetachGithubDefault struct {
	_statusCode int

	Payload *cloud.GrpcGatewayRuntimeError
}

// IsSuccess returns true when this waypoint control service detach github default response has a 2xx status code
func (o *WaypointControlServiceDetachGithubDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this waypoint control service detach github default response has a 3xx status code
func (o *WaypointControlServiceDetachGithubDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this waypoint control service detach github default response has a 4xx status code
func (o *WaypointControlServiceDetachGithubDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this waypoint control service detach github default response has a 5xx status code
func (o *WaypointControlServiceDetachGithubDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this waypoint control service detach github default response a status code equal to that given
func (o *WaypointControlServiceDetachGithubDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the waypoint control service detach github default response
func (o *WaypointControlServiceDetachGithubDefault) Code() int {
	return o._statusCode
}

func (o *WaypointControlServiceDetachGithubDefault) Error() string {
	return fmt.Sprintf("[GET /waypoint/2022-02-03/namespace/{namespace_id}/detach-github][%d] WaypointControlService_DetachGithub default  %+v", o._statusCode, o.Payload)
}

func (o *WaypointControlServiceDetachGithubDefault) String() string {
	return fmt.Sprintf("[GET /waypoint/2022-02-03/namespace/{namespace_id}/detach-github][%d] WaypointControlService_DetachGithub default  %+v", o._statusCode, o.Payload)
}

func (o *WaypointControlServiceDetachGithubDefault) GetPayload() *cloud.GrpcGatewayRuntimeError {
	return o.Payload
}

func (o *WaypointControlServiceDetachGithubDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(cloud.GrpcGatewayRuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
