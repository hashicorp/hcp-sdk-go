// Code generated by go-swagger; DO NOT EDIT.

package waypoint_control_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new waypoint control service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for waypoint control service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	WaypointControlServiceAttachGithub(params *WaypointControlServiceAttachGithubParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WaypointControlServiceAttachGithubOK, error)

	WaypointControlServiceCreateNamespace(params *WaypointControlServiceCreateNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WaypointControlServiceCreateNamespaceOK, error)

	WaypointControlServiceDeleteNamespace(params *WaypointControlServiceDeleteNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WaypointControlServiceDeleteNamespaceOK, error)

	WaypointControlServiceDetachGithub(params *WaypointControlServiceDetachGithubParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WaypointControlServiceDetachGithubOK, error)

	WaypointControlServiceGetNamespace(params *WaypointControlServiceGetNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WaypointControlServiceGetNamespaceOK, error)

	WaypointControlServiceGetNamespaceInfo(params *WaypointControlServiceGetNamespaceInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WaypointControlServiceGetNamespaceInfoOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
WaypointControlServiceAttachGithub waypoint control service attach github API
*/
func (a *Client) WaypointControlServiceAttachGithub(params *WaypointControlServiceAttachGithubParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WaypointControlServiceAttachGithubOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWaypointControlServiceAttachGithubParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WaypointControlService_AttachGithub",
		Method:             "GET",
		PathPattern:        "/waypoint/2022-02-03/namespace/{namespace_id}/attach-github",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WaypointControlServiceAttachGithubReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WaypointControlServiceAttachGithubOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WaypointControlServiceAttachGithubDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WaypointControlServiceCreateNamespace creates namespaces creates an h c p waypoint namespaces and start billing for it
*/
func (a *Client) WaypointControlServiceCreateNamespace(params *WaypointControlServiceCreateNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WaypointControlServiceCreateNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWaypointControlServiceCreateNamespaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WaypointControlService_CreateNamespace",
		Method:             "PUT",
		PathPattern:        "/waypoint/2022-02-03/organizations/{location.organization_id}/projects/{location.project_id}/namespace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WaypointControlServiceCreateNamespaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WaypointControlServiceCreateNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WaypointControlServiceCreateNamespaceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WaypointControlServiceDeleteNamespace deletes namespace deletes an h c p waypoint namespace
*/
func (a *Client) WaypointControlServiceDeleteNamespace(params *WaypointControlServiceDeleteNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WaypointControlServiceDeleteNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWaypointControlServiceDeleteNamespaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WaypointControlService_DeleteNamespace",
		Method:             "DELETE",
		PathPattern:        "/waypoint/2022-02-03/organizations/{location.organization_id}/projects/{location.project_id}/namespace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WaypointControlServiceDeleteNamespaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WaypointControlServiceDeleteNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WaypointControlServiceDeleteNamespaceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WaypointControlServiceDetachGithub waypoint control service detach github API
*/
func (a *Client) WaypointControlServiceDetachGithub(params *WaypointControlServiceDetachGithubParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WaypointControlServiceDetachGithubOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWaypointControlServiceDetachGithubParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WaypointControlService_DetachGithub",
		Method:             "GET",
		PathPattern:        "/waypoint/2022-02-03/namespace/{namespace_id}/detach-github",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WaypointControlServiceDetachGithubReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WaypointControlServiceDetachGithubOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WaypointControlServiceDetachGithubDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WaypointControlServiceGetNamespace gets namespace returns the namespace for the h c p organization project combo this automatically creates the namespace if it doesn t yet exist
*/
func (a *Client) WaypointControlServiceGetNamespace(params *WaypointControlServiceGetNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WaypointControlServiceGetNamespaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWaypointControlServiceGetNamespaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WaypointControlService_GetNamespace",
		Method:             "GET",
		PathPattern:        "/waypoint/2022-02-03/organizations/{location.organization_id}/projects/{location.project_id}/namespace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WaypointControlServiceGetNamespaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WaypointControlServiceGetNamespaceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WaypointControlServiceGetNamespaceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
WaypointControlServiceGetNamespaceInfo gets namespace info returns basic information about the namespace the user exists in
*/
func (a *Client) WaypointControlServiceGetNamespaceInfo(params *WaypointControlServiceGetNamespaceInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*WaypointControlServiceGetNamespaceInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWaypointControlServiceGetNamespaceInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "WaypointControlService_GetNamespaceInfo",
		Method:             "GET",
		PathPattern:        "/waypoint/2022-02-03/namespace/*/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &WaypointControlServiceGetNamespaceInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WaypointControlServiceGetNamespaceInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*WaypointControlServiceGetNamespaceInfoDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
