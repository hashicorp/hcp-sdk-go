// Code generated by go-swagger; DO NOT EDIT.

package waypoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewWaypointUIGetPipelineRun2Params creates a new WaypointUIGetPipelineRun2Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewWaypointUIGetPipelineRun2Params() *WaypointUIGetPipelineRun2Params {
	return &WaypointUIGetPipelineRun2Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewWaypointUIGetPipelineRun2ParamsWithTimeout creates a new WaypointUIGetPipelineRun2Params object
// with the ability to set a timeout on a request.
func NewWaypointUIGetPipelineRun2ParamsWithTimeout(timeout time.Duration) *WaypointUIGetPipelineRun2Params {
	return &WaypointUIGetPipelineRun2Params{
		timeout: timeout,
	}
}

// NewWaypointUIGetPipelineRun2ParamsWithContext creates a new WaypointUIGetPipelineRun2Params object
// with the ability to set a context for a request.
func NewWaypointUIGetPipelineRun2ParamsWithContext(ctx context.Context) *WaypointUIGetPipelineRun2Params {
	return &WaypointUIGetPipelineRun2Params{
		Context: ctx,
	}
}

// NewWaypointUIGetPipelineRun2ParamsWithHTTPClient creates a new WaypointUIGetPipelineRun2Params object
// with the ability to set a custom HTTPClient for a request.
func NewWaypointUIGetPipelineRun2ParamsWithHTTPClient(client *http.Client) *WaypointUIGetPipelineRun2Params {
	return &WaypointUIGetPipelineRun2Params{
		HTTPClient: client,
	}
}

/*
WaypointUIGetPipelineRun2Params contains all the parameters to send to the API endpoint

	for the waypoint UI get pipeline run2 operation.

	Typically these are written to a http.Request.
*/
type WaypointUIGetPipelineRun2Params struct {

	/* NamespaceID.

	   namespace_id is the id of the namespace.
	*/
	NamespaceID string

	/* PipelineID.

	   Reference a single pipeline by ID.
	*/
	PipelineID *string

	/* PipelineOwnerPipelineName.

	   the name of the defined pipeline config
	*/
	PipelineOwnerPipelineName string

	// PipelineOwnerProjectProject.
	PipelineOwnerProjectProject string

	// Sequence.
	//
	// Format: uint64
	Sequence string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the waypoint UI get pipeline run2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *WaypointUIGetPipelineRun2Params) WithDefaults() *WaypointUIGetPipelineRun2Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the waypoint UI get pipeline run2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *WaypointUIGetPipelineRun2Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the waypoint UI get pipeline run2 params
func (o *WaypointUIGetPipelineRun2Params) WithTimeout(timeout time.Duration) *WaypointUIGetPipelineRun2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the waypoint UI get pipeline run2 params
func (o *WaypointUIGetPipelineRun2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the waypoint UI get pipeline run2 params
func (o *WaypointUIGetPipelineRun2Params) WithContext(ctx context.Context) *WaypointUIGetPipelineRun2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the waypoint UI get pipeline run2 params
func (o *WaypointUIGetPipelineRun2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the waypoint UI get pipeline run2 params
func (o *WaypointUIGetPipelineRun2Params) WithHTTPClient(client *http.Client) *WaypointUIGetPipelineRun2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the waypoint UI get pipeline run2 params
func (o *WaypointUIGetPipelineRun2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNamespaceID adds the namespaceID to the waypoint UI get pipeline run2 params
func (o *WaypointUIGetPipelineRun2Params) WithNamespaceID(namespaceID string) *WaypointUIGetPipelineRun2Params {
	o.SetNamespaceID(namespaceID)
	return o
}

// SetNamespaceID adds the namespaceId to the waypoint UI get pipeline run2 params
func (o *WaypointUIGetPipelineRun2Params) SetNamespaceID(namespaceID string) {
	o.NamespaceID = namespaceID
}

// WithPipelineID adds the pipelineID to the waypoint UI get pipeline run2 params
func (o *WaypointUIGetPipelineRun2Params) WithPipelineID(pipelineID *string) *WaypointUIGetPipelineRun2Params {
	o.SetPipelineID(pipelineID)
	return o
}

// SetPipelineID adds the pipelineId to the waypoint UI get pipeline run2 params
func (o *WaypointUIGetPipelineRun2Params) SetPipelineID(pipelineID *string) {
	o.PipelineID = pipelineID
}

// WithPipelineOwnerPipelineName adds the pipelineOwnerPipelineName to the waypoint UI get pipeline run2 params
func (o *WaypointUIGetPipelineRun2Params) WithPipelineOwnerPipelineName(pipelineOwnerPipelineName string) *WaypointUIGetPipelineRun2Params {
	o.SetPipelineOwnerPipelineName(pipelineOwnerPipelineName)
	return o
}

// SetPipelineOwnerPipelineName adds the pipelineOwnerPipelineName to the waypoint UI get pipeline run2 params
func (o *WaypointUIGetPipelineRun2Params) SetPipelineOwnerPipelineName(pipelineOwnerPipelineName string) {
	o.PipelineOwnerPipelineName = pipelineOwnerPipelineName
}

// WithPipelineOwnerProjectProject adds the pipelineOwnerProjectProject to the waypoint UI get pipeline run2 params
func (o *WaypointUIGetPipelineRun2Params) WithPipelineOwnerProjectProject(pipelineOwnerProjectProject string) *WaypointUIGetPipelineRun2Params {
	o.SetPipelineOwnerProjectProject(pipelineOwnerProjectProject)
	return o
}

// SetPipelineOwnerProjectProject adds the pipelineOwnerProjectProject to the waypoint UI get pipeline run2 params
func (o *WaypointUIGetPipelineRun2Params) SetPipelineOwnerProjectProject(pipelineOwnerProjectProject string) {
	o.PipelineOwnerProjectProject = pipelineOwnerProjectProject
}

// WithSequence adds the sequence to the waypoint UI get pipeline run2 params
func (o *WaypointUIGetPipelineRun2Params) WithSequence(sequence string) *WaypointUIGetPipelineRun2Params {
	o.SetSequence(sequence)
	return o
}

// SetSequence adds the sequence to the waypoint UI get pipeline run2 params
func (o *WaypointUIGetPipelineRun2Params) SetSequence(sequence string) {
	o.Sequence = sequence
}

// WriteToRequest writes these params to a swagger request
func (o *WaypointUIGetPipelineRun2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param namespace_id
	if err := r.SetPathParam("namespace_id", o.NamespaceID); err != nil {
		return err
	}

	if o.PipelineID != nil {

		// query param pipeline.id
		var qrPipelineID string

		if o.PipelineID != nil {
			qrPipelineID = *o.PipelineID
		}
		qPipelineID := qrPipelineID
		if qPipelineID != "" {

			if err := r.SetQueryParam("pipeline.id", qPipelineID); err != nil {
				return err
			}
		}
	}

	// path param pipeline.owner.pipeline_name
	if err := r.SetPathParam("pipeline.owner.pipeline_name", o.PipelineOwnerPipelineName); err != nil {
		return err
	}

	// path param pipeline.owner.project.project
	if err := r.SetPathParam("pipeline.owner.project.project", o.PipelineOwnerProjectProject); err != nil {
		return err
	}

	// path param sequence
	if err := r.SetPathParam("sequence", o.Sequence); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
