// Code generated by go-swagger; DO NOT EDIT.

package waypoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewWaypointGetUserParams creates a new WaypointGetUserParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewWaypointGetUserParams() *WaypointGetUserParams {
	return &WaypointGetUserParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewWaypointGetUserParamsWithTimeout creates a new WaypointGetUserParams object
// with the ability to set a timeout on a request.
func NewWaypointGetUserParamsWithTimeout(timeout time.Duration) *WaypointGetUserParams {
	return &WaypointGetUserParams{
		timeout: timeout,
	}
}

// NewWaypointGetUserParamsWithContext creates a new WaypointGetUserParams object
// with the ability to set a context for a request.
func NewWaypointGetUserParamsWithContext(ctx context.Context) *WaypointGetUserParams {
	return &WaypointGetUserParams{
		Context: ctx,
	}
}

// NewWaypointGetUserParamsWithHTTPClient creates a new WaypointGetUserParams object
// with the ability to set a custom HTTPClient for a request.
func NewWaypointGetUserParamsWithHTTPClient(client *http.Client) *WaypointGetUserParams {
	return &WaypointGetUserParams{
		HTTPClient: client,
	}
}

/*
WaypointGetUserParams contains all the parameters to send to the API endpoint

	for the waypoint get user operation.

	Typically these are written to a http.Request.
*/
type WaypointGetUserParams struct {

	/* NamespaceID.

	   namespace_id is the id of the namespace.
	*/
	NamespaceID string

	// UserIDID.
	UserIDID string

	// UserUsernameUsername.
	UserUsernameUsername *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the waypoint get user params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *WaypointGetUserParams) WithDefaults() *WaypointGetUserParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the waypoint get user params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *WaypointGetUserParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the waypoint get user params
func (o *WaypointGetUserParams) WithTimeout(timeout time.Duration) *WaypointGetUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the waypoint get user params
func (o *WaypointGetUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the waypoint get user params
func (o *WaypointGetUserParams) WithContext(ctx context.Context) *WaypointGetUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the waypoint get user params
func (o *WaypointGetUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the waypoint get user params
func (o *WaypointGetUserParams) WithHTTPClient(client *http.Client) *WaypointGetUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the waypoint get user params
func (o *WaypointGetUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNamespaceID adds the namespaceID to the waypoint get user params
func (o *WaypointGetUserParams) WithNamespaceID(namespaceID string) *WaypointGetUserParams {
	o.SetNamespaceID(namespaceID)
	return o
}

// SetNamespaceID adds the namespaceId to the waypoint get user params
func (o *WaypointGetUserParams) SetNamespaceID(namespaceID string) {
	o.NamespaceID = namespaceID
}

// WithUserIDID adds the userIDID to the waypoint get user params
func (o *WaypointGetUserParams) WithUserIDID(userIDID string) *WaypointGetUserParams {
	o.SetUserIDID(userIDID)
	return o
}

// SetUserIDID adds the userIdId to the waypoint get user params
func (o *WaypointGetUserParams) SetUserIDID(userIDID string) {
	o.UserIDID = userIDID
}

// WithUserUsernameUsername adds the userUsernameUsername to the waypoint get user params
func (o *WaypointGetUserParams) WithUserUsernameUsername(userUsernameUsername *string) *WaypointGetUserParams {
	o.SetUserUsernameUsername(userUsernameUsername)
	return o
}

// SetUserUsernameUsername adds the userUsernameUsername to the waypoint get user params
func (o *WaypointGetUserParams) SetUserUsernameUsername(userUsernameUsername *string) {
	o.UserUsernameUsername = userUsernameUsername
}

// WriteToRequest writes these params to a swagger request
func (o *WaypointGetUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param namespace_id
	if err := r.SetPathParam("namespace_id", o.NamespaceID); err != nil {
		return err
	}

	// path param user.id.id
	if err := r.SetPathParam("user.id.id", o.UserIDID); err != nil {
		return err
	}

	if o.UserUsernameUsername != nil {

		// query param user.username.username
		var qrUserUsernameUsername string

		if o.UserUsernameUsername != nil {
			qrUserUsernameUsername = *o.UserUsernameUsername
		}
		qUserUsernameUsername := qrUserUsernameUsername
		if qUserUsernameUsername != "" {

			if err := r.SetQueryParam("user.username.username", qUserUsernameUsername); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
