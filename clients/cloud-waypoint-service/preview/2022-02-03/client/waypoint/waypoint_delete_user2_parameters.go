// Code generated by go-swagger; DO NOT EDIT.

package waypoint

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewWaypointDeleteUser2Params creates a new WaypointDeleteUser2Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewWaypointDeleteUser2Params() *WaypointDeleteUser2Params {
	return &WaypointDeleteUser2Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewWaypointDeleteUser2ParamsWithTimeout creates a new WaypointDeleteUser2Params object
// with the ability to set a timeout on a request.
func NewWaypointDeleteUser2ParamsWithTimeout(timeout time.Duration) *WaypointDeleteUser2Params {
	return &WaypointDeleteUser2Params{
		timeout: timeout,
	}
}

// NewWaypointDeleteUser2ParamsWithContext creates a new WaypointDeleteUser2Params object
// with the ability to set a context for a request.
func NewWaypointDeleteUser2ParamsWithContext(ctx context.Context) *WaypointDeleteUser2Params {
	return &WaypointDeleteUser2Params{
		Context: ctx,
	}
}

// NewWaypointDeleteUser2ParamsWithHTTPClient creates a new WaypointDeleteUser2Params object
// with the ability to set a custom HTTPClient for a request.
func NewWaypointDeleteUser2ParamsWithHTTPClient(client *http.Client) *WaypointDeleteUser2Params {
	return &WaypointDeleteUser2Params{
		HTTPClient: client,
	}
}

/*
WaypointDeleteUser2Params contains all the parameters to send to the API endpoint

	for the waypoint delete user2 operation.

	Typically these are written to a http.Request.
*/
type WaypointDeleteUser2Params struct {

	/* NamespaceID.

	   namespace_id is the id of the namespace.
	*/
	NamespaceID string

	// UserIDID.
	UserIDID *string

	// UserUsernameUsername.
	UserUsernameUsername string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the waypoint delete user2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *WaypointDeleteUser2Params) WithDefaults() *WaypointDeleteUser2Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the waypoint delete user2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *WaypointDeleteUser2Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the waypoint delete user2 params
func (o *WaypointDeleteUser2Params) WithTimeout(timeout time.Duration) *WaypointDeleteUser2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the waypoint delete user2 params
func (o *WaypointDeleteUser2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the waypoint delete user2 params
func (o *WaypointDeleteUser2Params) WithContext(ctx context.Context) *WaypointDeleteUser2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the waypoint delete user2 params
func (o *WaypointDeleteUser2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the waypoint delete user2 params
func (o *WaypointDeleteUser2Params) WithHTTPClient(client *http.Client) *WaypointDeleteUser2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the waypoint delete user2 params
func (o *WaypointDeleteUser2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNamespaceID adds the namespaceID to the waypoint delete user2 params
func (o *WaypointDeleteUser2Params) WithNamespaceID(namespaceID string) *WaypointDeleteUser2Params {
	o.SetNamespaceID(namespaceID)
	return o
}

// SetNamespaceID adds the namespaceId to the waypoint delete user2 params
func (o *WaypointDeleteUser2Params) SetNamespaceID(namespaceID string) {
	o.NamespaceID = namespaceID
}

// WithUserIDID adds the userIDID to the waypoint delete user2 params
func (o *WaypointDeleteUser2Params) WithUserIDID(userIDID *string) *WaypointDeleteUser2Params {
	o.SetUserIDID(userIDID)
	return o
}

// SetUserIDID adds the userIdId to the waypoint delete user2 params
func (o *WaypointDeleteUser2Params) SetUserIDID(userIDID *string) {
	o.UserIDID = userIDID
}

// WithUserUsernameUsername adds the userUsernameUsername to the waypoint delete user2 params
func (o *WaypointDeleteUser2Params) WithUserUsernameUsername(userUsernameUsername string) *WaypointDeleteUser2Params {
	o.SetUserUsernameUsername(userUsernameUsername)
	return o
}

// SetUserUsernameUsername adds the userUsernameUsername to the waypoint delete user2 params
func (o *WaypointDeleteUser2Params) SetUserUsernameUsername(userUsernameUsername string) {
	o.UserUsernameUsername = userUsernameUsername
}

// WriteToRequest writes these params to a swagger request
func (o *WaypointDeleteUser2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param namespace_id
	if err := r.SetPathParam("namespace_id", o.NamespaceID); err != nil {
		return err
	}

	if o.UserIDID != nil {

		// query param user.id.id
		var qrUserIDID string

		if o.UserIDID != nil {
			qrUserIDID = *o.UserIDID
		}
		qUserIDID := qrUserIDID
		if qUserIDID != "" {

			if err := r.SetQueryParam("user.id.id", qUserIDID); err != nil {
				return err
			}
		}
	}

	// path param user.username.username
	if err := r.SetPathParam("user.username.username", o.UserUsernameUsername); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
