// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HashicorpCloudWaypointUIActionConfigBundleApplicationTemplateAssignment hashicorp cloud waypoint UI action config bundle application template assignment
//
// swagger:model hashicorp.cloud.waypoint.UI.ActionConfigBundle.ApplicationTemplateAssignment
type HashicorpCloudWaypointUIActionConfigBundleApplicationTemplateAssignment struct {

	// The application template ref that is assigned.
	// This should be using the Name over the ID, because the frontend will
	// want the name to save a lookup.
	//
	// NOTE: we keep this as a special proto message in case there are other
	//  details about templates we want to include like we do with apps.
	ApplicationTemplate *HashicorpCloudWaypointRefApplicationTemplate `json:"application_template,omitempty"`
}

// Validate validates this hashicorp cloud waypoint UI action config bundle application template assignment
func (m *HashicorpCloudWaypointUIActionConfigBundleApplicationTemplateAssignment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpCloudWaypointUIActionConfigBundleApplicationTemplateAssignment) validateApplicationTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationTemplate) { // not required
		return nil
	}

	if m.ApplicationTemplate != nil {
		if err := m.ApplicationTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application_template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("application_template")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hashicorp cloud waypoint UI action config bundle application template assignment based on the context it is used
func (m *HashicorpCloudWaypointUIActionConfigBundleApplicationTemplateAssignment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpCloudWaypointUIActionConfigBundleApplicationTemplateAssignment) contextValidateApplicationTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.ApplicationTemplate != nil {

		if swag.IsZero(m.ApplicationTemplate) { // not required
			return nil
		}

		if err := m.ApplicationTemplate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application_template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("application_template")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpCloudWaypointUIActionConfigBundleApplicationTemplateAssignment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpCloudWaypointUIActionConfigBundleApplicationTemplateAssignment) UnmarshalBinary(b []byte) error {
	var res HashicorpCloudWaypointUIActionConfigBundleApplicationTemplateAssignment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
