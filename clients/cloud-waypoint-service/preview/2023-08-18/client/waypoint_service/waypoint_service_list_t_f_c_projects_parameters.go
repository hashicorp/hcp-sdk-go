// Code generated by go-swagger; DO NOT EDIT.

package waypoint_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewWaypointServiceListTFCProjectsParams creates a new WaypointServiceListTFCProjectsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewWaypointServiceListTFCProjectsParams() *WaypointServiceListTFCProjectsParams {
	return &WaypointServiceListTFCProjectsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewWaypointServiceListTFCProjectsParamsWithTimeout creates a new WaypointServiceListTFCProjectsParams object
// with the ability to set a timeout on a request.
func NewWaypointServiceListTFCProjectsParamsWithTimeout(timeout time.Duration) *WaypointServiceListTFCProjectsParams {
	return &WaypointServiceListTFCProjectsParams{
		timeout: timeout,
	}
}

// NewWaypointServiceListTFCProjectsParamsWithContext creates a new WaypointServiceListTFCProjectsParams object
// with the ability to set a context for a request.
func NewWaypointServiceListTFCProjectsParamsWithContext(ctx context.Context) *WaypointServiceListTFCProjectsParams {
	return &WaypointServiceListTFCProjectsParams{
		Context: ctx,
	}
}

// NewWaypointServiceListTFCProjectsParamsWithHTTPClient creates a new WaypointServiceListTFCProjectsParams object
// with the ability to set a custom HTTPClient for a request.
func NewWaypointServiceListTFCProjectsParamsWithHTTPClient(client *http.Client) *WaypointServiceListTFCProjectsParams {
	return &WaypointServiceListTFCProjectsParams{
		HTTPClient: client,
	}
}

/*
WaypointServiceListTFCProjectsParams contains all the parameters to send to the API endpoint

	for the waypoint service list t f c projects operation.

	Typically these are written to a http.Request.
*/
type WaypointServiceListTFCProjectsParams struct {

	// NamespaceID.
	NamespaceID string

	/* NamespaceLocationOrganizationID.

	   organization_id is the id of the organization.
	*/
	NamespaceLocationOrganizationID *string

	/* NamespaceLocationProjectID.

	   project_id is the projects id.
	*/
	NamespaceLocationProjectID *string

	/* NamespaceLocationRegionProvider.

	   provider is the named cloud provider ("aws", "gcp", "azure")
	*/
	NamespaceLocationRegionProvider *string

	/* NamespaceLocationRegionRegion.

	   region is the cloud region ("us-west1", "us-east1")
	*/
	NamespaceLocationRegionRegion *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the waypoint service list t f c projects params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *WaypointServiceListTFCProjectsParams) WithDefaults() *WaypointServiceListTFCProjectsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the waypoint service list t f c projects params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *WaypointServiceListTFCProjectsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the waypoint service list t f c projects params
func (o *WaypointServiceListTFCProjectsParams) WithTimeout(timeout time.Duration) *WaypointServiceListTFCProjectsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the waypoint service list t f c projects params
func (o *WaypointServiceListTFCProjectsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the waypoint service list t f c projects params
func (o *WaypointServiceListTFCProjectsParams) WithContext(ctx context.Context) *WaypointServiceListTFCProjectsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the waypoint service list t f c projects params
func (o *WaypointServiceListTFCProjectsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the waypoint service list t f c projects params
func (o *WaypointServiceListTFCProjectsParams) WithHTTPClient(client *http.Client) *WaypointServiceListTFCProjectsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the waypoint service list t f c projects params
func (o *WaypointServiceListTFCProjectsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNamespaceID adds the namespaceID to the waypoint service list t f c projects params
func (o *WaypointServiceListTFCProjectsParams) WithNamespaceID(namespaceID string) *WaypointServiceListTFCProjectsParams {
	o.SetNamespaceID(namespaceID)
	return o
}

// SetNamespaceID adds the namespaceId to the waypoint service list t f c projects params
func (o *WaypointServiceListTFCProjectsParams) SetNamespaceID(namespaceID string) {
	o.NamespaceID = namespaceID
}

// WithNamespaceLocationOrganizationID adds the namespaceLocationOrganizationID to the waypoint service list t f c projects params
func (o *WaypointServiceListTFCProjectsParams) WithNamespaceLocationOrganizationID(namespaceLocationOrganizationID *string) *WaypointServiceListTFCProjectsParams {
	o.SetNamespaceLocationOrganizationID(namespaceLocationOrganizationID)
	return o
}

// SetNamespaceLocationOrganizationID adds the namespaceLocationOrganizationId to the waypoint service list t f c projects params
func (o *WaypointServiceListTFCProjectsParams) SetNamespaceLocationOrganizationID(namespaceLocationOrganizationID *string) {
	o.NamespaceLocationOrganizationID = namespaceLocationOrganizationID
}

// WithNamespaceLocationProjectID adds the namespaceLocationProjectID to the waypoint service list t f c projects params
func (o *WaypointServiceListTFCProjectsParams) WithNamespaceLocationProjectID(namespaceLocationProjectID *string) *WaypointServiceListTFCProjectsParams {
	o.SetNamespaceLocationProjectID(namespaceLocationProjectID)
	return o
}

// SetNamespaceLocationProjectID adds the namespaceLocationProjectId to the waypoint service list t f c projects params
func (o *WaypointServiceListTFCProjectsParams) SetNamespaceLocationProjectID(namespaceLocationProjectID *string) {
	o.NamespaceLocationProjectID = namespaceLocationProjectID
}

// WithNamespaceLocationRegionProvider adds the namespaceLocationRegionProvider to the waypoint service list t f c projects params
func (o *WaypointServiceListTFCProjectsParams) WithNamespaceLocationRegionProvider(namespaceLocationRegionProvider *string) *WaypointServiceListTFCProjectsParams {
	o.SetNamespaceLocationRegionProvider(namespaceLocationRegionProvider)
	return o
}

// SetNamespaceLocationRegionProvider adds the namespaceLocationRegionProvider to the waypoint service list t f c projects params
func (o *WaypointServiceListTFCProjectsParams) SetNamespaceLocationRegionProvider(namespaceLocationRegionProvider *string) {
	o.NamespaceLocationRegionProvider = namespaceLocationRegionProvider
}

// WithNamespaceLocationRegionRegion adds the namespaceLocationRegionRegion to the waypoint service list t f c projects params
func (o *WaypointServiceListTFCProjectsParams) WithNamespaceLocationRegionRegion(namespaceLocationRegionRegion *string) *WaypointServiceListTFCProjectsParams {
	o.SetNamespaceLocationRegionRegion(namespaceLocationRegionRegion)
	return o
}

// SetNamespaceLocationRegionRegion adds the namespaceLocationRegionRegion to the waypoint service list t f c projects params
func (o *WaypointServiceListTFCProjectsParams) SetNamespaceLocationRegionRegion(namespaceLocationRegionRegion *string) {
	o.NamespaceLocationRegionRegion = namespaceLocationRegionRegion
}

// WriteToRequest writes these params to a swagger request
func (o *WaypointServiceListTFCProjectsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param namespace.id
	if err := r.SetPathParam("namespace.id", o.NamespaceID); err != nil {
		return err
	}

	if o.NamespaceLocationOrganizationID != nil {

		// query param namespace.location.organization_id
		var qrNamespaceLocationOrganizationID string

		if o.NamespaceLocationOrganizationID != nil {
			qrNamespaceLocationOrganizationID = *o.NamespaceLocationOrganizationID
		}
		qNamespaceLocationOrganizationID := qrNamespaceLocationOrganizationID
		if qNamespaceLocationOrganizationID != "" {

			if err := r.SetQueryParam("namespace.location.organization_id", qNamespaceLocationOrganizationID); err != nil {
				return err
			}
		}
	}

	if o.NamespaceLocationProjectID != nil {

		// query param namespace.location.project_id
		var qrNamespaceLocationProjectID string

		if o.NamespaceLocationProjectID != nil {
			qrNamespaceLocationProjectID = *o.NamespaceLocationProjectID
		}
		qNamespaceLocationProjectID := qrNamespaceLocationProjectID
		if qNamespaceLocationProjectID != "" {

			if err := r.SetQueryParam("namespace.location.project_id", qNamespaceLocationProjectID); err != nil {
				return err
			}
		}
	}

	if o.NamespaceLocationRegionProvider != nil {

		// query param namespace.location.region.provider
		var qrNamespaceLocationRegionProvider string

		if o.NamespaceLocationRegionProvider != nil {
			qrNamespaceLocationRegionProvider = *o.NamespaceLocationRegionProvider
		}
		qNamespaceLocationRegionProvider := qrNamespaceLocationRegionProvider
		if qNamespaceLocationRegionProvider != "" {

			if err := r.SetQueryParam("namespace.location.region.provider", qNamespaceLocationRegionProvider); err != nil {
				return err
			}
		}
	}

	if o.NamespaceLocationRegionRegion != nil {

		// query param namespace.location.region.region
		var qrNamespaceLocationRegionRegion string

		if o.NamespaceLocationRegionRegion != nil {
			qrNamespaceLocationRegionRegion = *o.NamespaceLocationRegionRegion
		}
		qNamespaceLocationRegionRegion := qrNamespaceLocationRegionRegion
		if qNamespaceLocationRegionRegion != "" {

			if err := r.SetQueryParam("namespace.location.region.region", qNamespaceLocationRegionRegion); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
