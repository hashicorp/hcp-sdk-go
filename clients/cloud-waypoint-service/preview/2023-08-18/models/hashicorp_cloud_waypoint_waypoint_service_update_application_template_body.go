// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HashicorpCloudWaypointWaypointServiceUpdateApplicationTemplateBody hashicorp cloud waypoint waypoint service update application template body
//
// swagger:model hashicorp.cloud.waypoint.WaypointService.UpdateApplicationTemplateBody
type HashicorpCloudWaypointWaypointServiceUpdateApplicationTemplateBody struct {

	// application_template resembles the desired updated state of the existing
	// application template.
	ApplicationTemplate *HashicorpCloudWaypointApplicationTemplate `json:"application_template,omitempty"`

	// existing application template
	ExistingApplicationTemplate *HashicorpCloudWaypointWaypointServiceUpdateApplicationTemplateBodyExistingApplicationTemplate `json:"existing_application_template,omitempty"`

	// Global references the entire server. This is used in some APIs
	// as a way to read/write values that are server-global.
	Namespace interface{} `json:"namespace,omitempty"`

	// Field mask to update only specific fields. I.e. if you want a field updated,
	// you must include it in the field mask. For now, we only use this
	// for ActionConfigRefs inside application_template for clearing assignments.
	UpdateMask string `json:"update_mask,omitempty"`
}

// Validate validates this hashicorp cloud waypoint waypoint service update application template body
func (m *HashicorpCloudWaypointWaypointServiceUpdateApplicationTemplateBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationTemplate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExistingApplicationTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpCloudWaypointWaypointServiceUpdateApplicationTemplateBody) validateApplicationTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationTemplate) { // not required
		return nil
	}

	if m.ApplicationTemplate != nil {
		if err := m.ApplicationTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application_template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("application_template")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpCloudWaypointWaypointServiceUpdateApplicationTemplateBody) validateExistingApplicationTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExistingApplicationTemplate) { // not required
		return nil
	}

	if m.ExistingApplicationTemplate != nil {
		if err := m.ExistingApplicationTemplate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("existing_application_template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("existing_application_template")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hashicorp cloud waypoint waypoint service update application template body based on the context it is used
func (m *HashicorpCloudWaypointWaypointServiceUpdateApplicationTemplateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExistingApplicationTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpCloudWaypointWaypointServiceUpdateApplicationTemplateBody) contextValidateApplicationTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.ApplicationTemplate != nil {

		if swag.IsZero(m.ApplicationTemplate) { // not required
			return nil
		}

		if err := m.ApplicationTemplate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application_template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("application_template")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpCloudWaypointWaypointServiceUpdateApplicationTemplateBody) contextValidateExistingApplicationTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.ExistingApplicationTemplate != nil {

		if swag.IsZero(m.ExistingApplicationTemplate) { // not required
			return nil
		}

		if err := m.ExistingApplicationTemplate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("existing_application_template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("existing_application_template")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpCloudWaypointWaypointServiceUpdateApplicationTemplateBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpCloudWaypointWaypointServiceUpdateApplicationTemplateBody) UnmarshalBinary(b []byte) error {
	var res HashicorpCloudWaypointWaypointServiceUpdateApplicationTemplateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HashicorpCloudWaypointWaypointServiceUpdateApplicationTemplateBodyExistingApplicationTemplate Template Ref Without ID
//
// existing_application_template refers to the application template being updated.
//
// swagger:model HashicorpCloudWaypointWaypointServiceUpdateApplicationTemplateBodyExistingApplicationTemplate
type HashicorpCloudWaypointWaypointServiceUpdateApplicationTemplateBodyExistingApplicationTemplate struct {

	// ID of the ApplicationTemplate
	ID string `json:"id,omitempty"`
}

// Validate validates this hashicorp cloud waypoint waypoint service update application template body existing application template
func (m *HashicorpCloudWaypointWaypointServiceUpdateApplicationTemplateBodyExistingApplicationTemplate) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this hashicorp cloud waypoint waypoint service update application template body existing application template based on context it is used
func (m *HashicorpCloudWaypointWaypointServiceUpdateApplicationTemplateBodyExistingApplicationTemplate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpCloudWaypointWaypointServiceUpdateApplicationTemplateBodyExistingApplicationTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpCloudWaypointWaypointServiceUpdateApplicationTemplateBodyExistingApplicationTemplate) UnmarshalBinary(b []byte) error {
	var res HashicorpCloudWaypointWaypointServiceUpdateApplicationTemplateBodyExistingApplicationTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
