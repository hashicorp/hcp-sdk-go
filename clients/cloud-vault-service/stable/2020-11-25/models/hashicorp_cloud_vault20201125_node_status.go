// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HashicorpCloudVault20201125NodeStatus hashicorp cloud vault 20201125 node status
//
// swagger:model hashicorp.cloud.vault_20201125.NodeStatus
type HashicorpCloudVault20201125NodeStatus struct {

	// alternative_versions is a list of versions that should also be considered for
	// an update as they might come with additional improvements and features.
	AlternativeVersions string `json:"alternative_versions,omitempty"`

	// current_version is the node's current version in semantic version format.
	CurrentVersion string `json:"current_version,omitempty"`

	// has_security_flaw will be true if the current version has a security flaw.
	HasSecurityFlaws bool `json:"has_security_flaws,omitempty"`

	// node_binary_architecture is the lower-case architecture of the client binary
	// (e.g. amd64, arm, ...).
	NodeBinaryArchitecture string `json:"node_binary_architecture,omitempty"`

	// node_id is the node identification.
	NodeID string `json:"node_id,omitempty"`

	// node_initialized indicates if the node has been initialized.
	NodeInitialized bool `json:"node_initialized,omitempty"`

	// node_os is the lower-case name of the operating system the client is
	// running on (e.g. linux, windows).
	NodeOs string `json:"node_os,omitempty"`

	// node_sealed indicates if the node is sealed.
	NodeSealed bool `json:"node_sealed,omitempty"`

	// node_type indicates the node type.
	NodeType bool `json:"node_type,omitempty"`

	// recommended_version is the version the product should ideally be updated to.
	RecommendedVersion string `json:"recommended_version,omitempty"`

	// status is the status of the current version. The status may help to
	// determine the urgency of the update.
	Status *HashicorpCloudVault20201125NodeStatusStatus `json:"status,omitempty"`

	// status_version is the version of the status message format. To ensure
	// that the version is not omitted by accident the initial version is 1.
	StatusVersion int64 `json:"status_version,omitempty"`
}

// Validate validates this hashicorp cloud vault 20201125 node status
func (m *HashicorpCloudVault20201125NodeStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpCloudVault20201125NodeStatus) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hashicorp cloud vault 20201125 node status based on the context it is used
func (m *HashicorpCloudVault20201125NodeStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpCloudVault20201125NodeStatus) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpCloudVault20201125NodeStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpCloudVault20201125NodeStatus) UnmarshalBinary(b []byte) error {
	var res HashicorpCloudVault20201125NodeStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
