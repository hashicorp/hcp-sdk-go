// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HashicorpCloudVault20200420NetworkConfig hashicorp cloud vault 20200420 network config
//
// swagger:model hashicorp.cloud.vault_20200420.NetworkConfig
type HashicorpCloudVault20200420NetworkConfig struct {

	// cors config
	CorsConfig *HashicorpCloudVault20200420CORSConfig `json:"cors_config,omitempty"`

	// network_id is the ID of the network the Vault cluster belongs to.
	NetworkID string `json:"network_id,omitempty"`

	// public_ips_disabled indicates if public IP's are disabled.
	PublicIpsDisabled bool `json:"public_ips_disabled,omitempty"`
}

// Validate validates this hashicorp cloud vault 20200420 network config
func (m *HashicorpCloudVault20200420NetworkConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCorsConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpCloudVault20200420NetworkConfig) validateCorsConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.CorsConfig) { // not required
		return nil
	}

	if m.CorsConfig != nil {
		if err := m.CorsConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cors_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cors_config")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hashicorp cloud vault 20200420 network config based on the context it is used
func (m *HashicorpCloudVault20200420NetworkConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCorsConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpCloudVault20200420NetworkConfig) contextValidateCorsConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.CorsConfig != nil {
		if err := m.CorsConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cors_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cors_config")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpCloudVault20200420NetworkConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpCloudVault20200420NetworkConfig) UnmarshalBinary(b []byte) error {
	var res HashicorpCloudVault20200420NetworkConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
