// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	cloud "github.com/hashicorp/hcp-sdk-go/clients/cloud-shared/v1/models"
)

// HashicorpCloudNetwork20200907CreateDNSForwardingResponse CreateDNSForwardingResponse is a response type for CreateDNSForwarding endpoint
//
// swagger:model hashicorp.cloud.network_20200907.CreateDNSForwardingResponse
type HashicorpCloudNetwork20200907CreateDNSForwardingResponse struct {

	// DNSForwarding is the created dnsForwarding
	DNSForwarding *HashicorpCloudNetwork20200907DNSForwardingResponse `json:"dns_forwarding,omitempty"`

	// operation is the operation representing the async create
	Operation *cloud.HashicorpCloudOperationOperation `json:"operation,omitempty"`
}

// Validate validates this hashicorp cloud network 20200907 create DNS forwarding response
func (m *HashicorpCloudNetwork20200907CreateDNSForwardingResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDNSForwarding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpCloudNetwork20200907CreateDNSForwardingResponse) validateDNSForwarding(formats strfmt.Registry) error {
	if swag.IsZero(m.DNSForwarding) { // not required
		return nil
	}

	if m.DNSForwarding != nil {
		if err := m.DNSForwarding.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dns_forwarding")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dns_forwarding")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpCloudNetwork20200907CreateDNSForwardingResponse) validateOperation(formats strfmt.Registry) error {
	if swag.IsZero(m.Operation) { // not required
		return nil
	}

	if m.Operation != nil {
		if err := m.Operation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hashicorp cloud network 20200907 create DNS forwarding response based on the context it is used
func (m *HashicorpCloudNetwork20200907CreateDNSForwardingResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDNSForwarding(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOperation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpCloudNetwork20200907CreateDNSForwardingResponse) contextValidateDNSForwarding(ctx context.Context, formats strfmt.Registry) error {

	if m.DNSForwarding != nil {

		if swag.IsZero(m.DNSForwarding) { // not required
			return nil
		}

		if err := m.DNSForwarding.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dns_forwarding")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dns_forwarding")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpCloudNetwork20200907CreateDNSForwardingResponse) contextValidateOperation(ctx context.Context, formats strfmt.Registry) error {

	if m.Operation != nil {

		if swag.IsZero(m.Operation) { // not required
			return nil
		}

		if err := m.Operation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpCloudNetwork20200907CreateDNSForwardingResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpCloudNetwork20200907CreateDNSForwardingResponse) UnmarshalBinary(b []byte) error {
	var res HashicorpCloudNetwork20200907CreateDNSForwardingResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
