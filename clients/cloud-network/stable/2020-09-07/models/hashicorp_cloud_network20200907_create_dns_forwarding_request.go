// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HashicorpCloudNetwork20200907CreateDNSForwardingRequest CreateDNSForwardingRequest is a request type for CreateDNSForwarding endpoint
//
// swagger:model hashicorp.cloud.network_20200907.CreateDNSForwardingRequest
type HashicorpCloudNetwork20200907CreateDNSForwardingRequest struct {

	// DNSForwarding is the dnsForwarding to be created.
	DNSForwarding *HashicorpCloudNetwork20200907DNSForwarding `json:"dns_forwarding,omitempty"`
}

// Validate validates this hashicorp cloud network 20200907 create DNS forwarding request
func (m *HashicorpCloudNetwork20200907CreateDNSForwardingRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDNSForwarding(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpCloudNetwork20200907CreateDNSForwardingRequest) validateDNSForwarding(formats strfmt.Registry) error {
	if swag.IsZero(m.DNSForwarding) { // not required
		return nil
	}

	if m.DNSForwarding != nil {
		if err := m.DNSForwarding.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dns_forwarding")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dns_forwarding")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hashicorp cloud network 20200907 create DNS forwarding request based on the context it is used
func (m *HashicorpCloudNetwork20200907CreateDNSForwardingRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDNSForwarding(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpCloudNetwork20200907CreateDNSForwardingRequest) contextValidateDNSForwarding(ctx context.Context, formats strfmt.Registry) error {

	if m.DNSForwarding != nil {

		if swag.IsZero(m.DNSForwarding) { // not required
			return nil
		}

		if err := m.DNSForwarding.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dns_forwarding")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dns_forwarding")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpCloudNetwork20200907CreateDNSForwardingRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpCloudNetwork20200907CreateDNSForwardingRequest) UnmarshalBinary(b []byte) error {
	var res HashicorpCloudNetwork20200907CreateDNSForwardingRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
