// Code generated by go-swagger; DO NOT EDIT.

package network_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/hashicorp/hcp-sdk-go/clients/cloud-network/stable/2020-09-07/models"
	cloud "github.com/hashicorp/hcp-sdk-go/clients/cloud-shared/v1/models"
)

// GetDNSForwardingRuleReader is a Reader for the GetDNSForwardingRule structure.
type GetDNSForwardingRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDNSForwardingRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDNSForwardingRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetDNSForwardingRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetDNSForwardingRuleOK creates a GetDNSForwardingRuleOK with default headers values
func NewGetDNSForwardingRuleOK() *GetDNSForwardingRuleOK {
	return &GetDNSForwardingRuleOK{}
}

/*
GetDNSForwardingRuleOK describes a response with status code 200, with default header values.

A successful response.
*/
type GetDNSForwardingRuleOK struct {
	Payload *models.HashicorpCloudNetwork20200907GetDNSForwardingRuleResponse
}

// IsSuccess returns true when this get Dns forwarding rule o k response has a 2xx status code
func (o *GetDNSForwardingRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get Dns forwarding rule o k response has a 3xx status code
func (o *GetDNSForwardingRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get Dns forwarding rule o k response has a 4xx status code
func (o *GetDNSForwardingRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get Dns forwarding rule o k response has a 5xx status code
func (o *GetDNSForwardingRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get Dns forwarding rule o k response a status code equal to that given
func (o *GetDNSForwardingRuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get Dns forwarding rule o k response
func (o *GetDNSForwardingRuleOK) Code() int {
	return 200
}

func (o *GetDNSForwardingRuleOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/2020-09-07/organizations/{hvn.location.organization_id}/projects/{hvn.location.project_id}/networks/{hvn.id}/dnsforwardings/{dns_forwarding_id}/rules/{id}][%d] getDnsForwardingRuleOK %s", 200, payload)
}

func (o *GetDNSForwardingRuleOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/2020-09-07/organizations/{hvn.location.organization_id}/projects/{hvn.location.project_id}/networks/{hvn.id}/dnsforwardings/{dns_forwarding_id}/rules/{id}][%d] getDnsForwardingRuleOK %s", 200, payload)
}

func (o *GetDNSForwardingRuleOK) GetPayload() *models.HashicorpCloudNetwork20200907GetDNSForwardingRuleResponse {
	return o.Payload
}

func (o *GetDNSForwardingRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HashicorpCloudNetwork20200907GetDNSForwardingRuleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDNSForwardingRuleDefault creates a GetDNSForwardingRuleDefault with default headers values
func NewGetDNSForwardingRuleDefault(code int) *GetDNSForwardingRuleDefault {
	return &GetDNSForwardingRuleDefault{
		_statusCode: code,
	}
}

/*
GetDNSForwardingRuleDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type GetDNSForwardingRuleDefault struct {
	_statusCode int

	Payload *cloud.GrpcGatewayRuntimeError
}

// IsSuccess returns true when this get DNS forwarding rule default response has a 2xx status code
func (o *GetDNSForwardingRuleDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get DNS forwarding rule default response has a 3xx status code
func (o *GetDNSForwardingRuleDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get DNS forwarding rule default response has a 4xx status code
func (o *GetDNSForwardingRuleDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get DNS forwarding rule default response has a 5xx status code
func (o *GetDNSForwardingRuleDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get DNS forwarding rule default response a status code equal to that given
func (o *GetDNSForwardingRuleDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get DNS forwarding rule default response
func (o *GetDNSForwardingRuleDefault) Code() int {
	return o._statusCode
}

func (o *GetDNSForwardingRuleDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/2020-09-07/organizations/{hvn.location.organization_id}/projects/{hvn.location.project_id}/networks/{hvn.id}/dnsforwardings/{dns_forwarding_id}/rules/{id}][%d] GetDNSForwardingRule default %s", o._statusCode, payload)
}

func (o *GetDNSForwardingRuleDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /network/2020-09-07/organizations/{hvn.location.organization_id}/projects/{hvn.location.project_id}/networks/{hvn.id}/dnsforwardings/{dns_forwarding_id}/rules/{id}][%d] GetDNSForwardingRule default %s", o._statusCode, payload)
}

func (o *GetDNSForwardingRuleDefault) GetPayload() *cloud.GrpcGatewayRuntimeError {
	return o.Payload
}

func (o *GetDNSForwardingRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(cloud.GrpcGatewayRuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
