// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// HashicorpCloudNetwork20200907PeeringState hashicorp cloud network 20200907 peering state
//
// swagger:model hashicorp.cloud.network_20200907.Peering.State
type HashicorpCloudNetwork20200907PeeringState string

func NewHashicorpCloudNetwork20200907PeeringState(value HashicorpCloudNetwork20200907PeeringState) *HashicorpCloudNetwork20200907PeeringState {
	return &value
}

// Pointer returns a pointer to a freshly-allocated HashicorpCloudNetwork20200907PeeringState.
func (m HashicorpCloudNetwork20200907PeeringState) Pointer() *HashicorpCloudNetwork20200907PeeringState {
	return &m
}

const (

	// HashicorpCloudNetwork20200907PeeringStateUNSET captures enum value "UNSET"
	HashicorpCloudNetwork20200907PeeringStateUNSET HashicorpCloudNetwork20200907PeeringState = "UNSET"

	// HashicorpCloudNetwork20200907PeeringStateCREATING captures enum value "CREATING"
	HashicorpCloudNetwork20200907PeeringStateCREATING HashicorpCloudNetwork20200907PeeringState = "CREATING"

	// HashicorpCloudNetwork20200907PeeringStatePENDINGACCEPTANCE captures enum value "PENDING_ACCEPTANCE"
	HashicorpCloudNetwork20200907PeeringStatePENDINGACCEPTANCE HashicorpCloudNetwork20200907PeeringState = "PENDING_ACCEPTANCE"

	// HashicorpCloudNetwork20200907PeeringStateACCEPTED captures enum value "ACCEPTED"
	HashicorpCloudNetwork20200907PeeringStateACCEPTED HashicorpCloudNetwork20200907PeeringState = "ACCEPTED"

	// HashicorpCloudNetwork20200907PeeringStateACTIVE captures enum value "ACTIVE"
	HashicorpCloudNetwork20200907PeeringStateACTIVE HashicorpCloudNetwork20200907PeeringState = "ACTIVE"

	// HashicorpCloudNetwork20200907PeeringStateFAILED captures enum value "FAILED"
	HashicorpCloudNetwork20200907PeeringStateFAILED HashicorpCloudNetwork20200907PeeringState = "FAILED"

	// HashicorpCloudNetwork20200907PeeringStateEXPIRED captures enum value "EXPIRED"
	HashicorpCloudNetwork20200907PeeringStateEXPIRED HashicorpCloudNetwork20200907PeeringState = "EXPIRED"

	// HashicorpCloudNetwork20200907PeeringStateREJECTED captures enum value "REJECTED"
	HashicorpCloudNetwork20200907PeeringStateREJECTED HashicorpCloudNetwork20200907PeeringState = "REJECTED"

	// HashicorpCloudNetwork20200907PeeringStateDELETING captures enum value "DELETING"
	HashicorpCloudNetwork20200907PeeringStateDELETING HashicorpCloudNetwork20200907PeeringState = "DELETING"
)

// for schema
var hashicorpCloudNetwork20200907PeeringStateEnum []interface{}

func init() {
	var res []HashicorpCloudNetwork20200907PeeringState
	if err := json.Unmarshal([]byte(`["UNSET","CREATING","PENDING_ACCEPTANCE","ACCEPTED","ACTIVE","FAILED","EXPIRED","REJECTED","DELETING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hashicorpCloudNetwork20200907PeeringStateEnum = append(hashicorpCloudNetwork20200907PeeringStateEnum, v)
	}
}

func (m HashicorpCloudNetwork20200907PeeringState) validateHashicorpCloudNetwork20200907PeeringStateEnum(path, location string, value HashicorpCloudNetwork20200907PeeringState) error {
	if err := validate.EnumCase(path, location, value, hashicorpCloudNetwork20200907PeeringStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this hashicorp cloud network 20200907 peering state
func (m HashicorpCloudNetwork20200907PeeringState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateHashicorpCloudNetwork20200907PeeringStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this hashicorp cloud network 20200907 peering state based on context it is used
func (m HashicorpCloudNetwork20200907PeeringState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
