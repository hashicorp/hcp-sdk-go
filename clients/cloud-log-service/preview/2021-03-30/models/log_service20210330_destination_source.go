// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LogService20210330DestinationSource log service 20210330 destination source
//
// swagger:model log_service_20210330DestinationSource
type LogService20210330DestinationSource string

func NewLogService20210330DestinationSource(value LogService20210330DestinationSource) *LogService20210330DestinationSource {
	return &value
}

// Pointer returns a pointer to a freshly-allocated LogService20210330DestinationSource.
func (m LogService20210330DestinationSource) Pointer() *LogService20210330DestinationSource {
	return &m
}

const (

	// LogService20210330DestinationSourceDESTINATIONSOURCEUNKNOWN captures enum value "DESTINATION_SOURCE_UNKNOWN"
	LogService20210330DestinationSourceDESTINATIONSOURCEUNKNOWN LogService20210330DestinationSource = "DESTINATION_SOURCE_UNKNOWN"

	// LogService20210330DestinationSourceDESTINATIONSOURCETERRAFORM captures enum value "DESTINATION_SOURCE_TERRAFORM"
	LogService20210330DestinationSourceDESTINATIONSOURCETERRAFORM LogService20210330DestinationSource = "DESTINATION_SOURCE_TERRAFORM"

	// LogService20210330DestinationSourceDESTINATIONSOURCEHCPUI captures enum value "DESTINATION_SOURCE_HCP_UI"
	LogService20210330DestinationSourceDESTINATIONSOURCEHCPUI LogService20210330DestinationSource = "DESTINATION_SOURCE_HCP_UI"
)

// for schema
var logService20210330DestinationSourceEnum []interface{}

func init() {
	var res []LogService20210330DestinationSource
	if err := json.Unmarshal([]byte(`["DESTINATION_SOURCE_UNKNOWN","DESTINATION_SOURCE_TERRAFORM","DESTINATION_SOURCE_HCP_UI"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		logService20210330DestinationSourceEnum = append(logService20210330DestinationSourceEnum, v)
	}
}

func (m LogService20210330DestinationSource) validateLogService20210330DestinationSourceEnum(path, location string, value LogService20210330DestinationSource) error {
	if err := validate.EnumCase(path, location, value, logService20210330DestinationSourceEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this log service 20210330 destination source
func (m LogService20210330DestinationSource) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLogService20210330DestinationSourceEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this log service 20210330 destination source based on context it is used
func (m LogService20210330DestinationSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
