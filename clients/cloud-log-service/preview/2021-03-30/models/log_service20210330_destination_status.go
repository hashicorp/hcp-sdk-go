// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LogService20210330DestinationStatus DestinationStatus indicates whether the destination is successfully streaming logs to the provider or failing to do so.
//
//   - DESTINATION_STATUS_STREAMING: DESTINATION_STATUS_STREAMING: the destination is streaming logs to the provider.
//   - DESTINATION_STATUS_FAILING_USER: DESTINATION_STATUS_FAILING_USER: the destination is failing to stream logs because of a user error (e.g. invalid credentials).
//   - DESTINATION_STATUS_FAILING_HCP: DESTINATION_STATUS_FAILING_HCP: the destination is failing to stream logs because of a HashiCorp Cloud Platform error.
//   - DESTINATION_STATUS_FAILING_PROVIDER: DESTINATION_STATUS_FAILING_PROVIDER: the destination is failing to stream logs because of a provider error.
//
// swagger:model log_service_20210330DestinationStatus
type LogService20210330DestinationStatus string

func NewLogService20210330DestinationStatus(value LogService20210330DestinationStatus) *LogService20210330DestinationStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated LogService20210330DestinationStatus.
func (m LogService20210330DestinationStatus) Pointer() *LogService20210330DestinationStatus {
	return &m
}

const (

	// LogService20210330DestinationStatusDESTINATIONSTATUSUNSPECIFIED captures enum value "DESTINATION_STATUS_UNSPECIFIED"
	LogService20210330DestinationStatusDESTINATIONSTATUSUNSPECIFIED LogService20210330DestinationStatus = "DESTINATION_STATUS_UNSPECIFIED"

	// LogService20210330DestinationStatusDESTINATIONSTATUSSTREAMING captures enum value "DESTINATION_STATUS_STREAMING"
	LogService20210330DestinationStatusDESTINATIONSTATUSSTREAMING LogService20210330DestinationStatus = "DESTINATION_STATUS_STREAMING"

	// LogService20210330DestinationStatusDESTINATIONSTATUSFAILINGUSER captures enum value "DESTINATION_STATUS_FAILING_USER"
	LogService20210330DestinationStatusDESTINATIONSTATUSFAILINGUSER LogService20210330DestinationStatus = "DESTINATION_STATUS_FAILING_USER"

	// LogService20210330DestinationStatusDESTINATIONSTATUSFAILINGHCP captures enum value "DESTINATION_STATUS_FAILING_HCP"
	LogService20210330DestinationStatusDESTINATIONSTATUSFAILINGHCP LogService20210330DestinationStatus = "DESTINATION_STATUS_FAILING_HCP"

	// LogService20210330DestinationStatusDESTINATIONSTATUSFAILINGPROVIDER captures enum value "DESTINATION_STATUS_FAILING_PROVIDER"
	LogService20210330DestinationStatusDESTINATIONSTATUSFAILINGPROVIDER LogService20210330DestinationStatus = "DESTINATION_STATUS_FAILING_PROVIDER"
)

// for schema
var logService20210330DestinationStatusEnum []interface{}

func init() {
	var res []LogService20210330DestinationStatus
	if err := json.Unmarshal([]byte(`["DESTINATION_STATUS_UNSPECIFIED","DESTINATION_STATUS_STREAMING","DESTINATION_STATUS_FAILING_USER","DESTINATION_STATUS_FAILING_HCP","DESTINATION_STATUS_FAILING_PROVIDER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		logService20210330DestinationStatusEnum = append(logService20210330DestinationStatusEnum, v)
	}
}

func (m LogService20210330DestinationStatus) validateLogService20210330DestinationStatusEnum(path, location string, value LogService20210330DestinationStatus) error {
	if err := validate.EnumCase(path, location, value, logService20210330DestinationStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this log service 20210330 destination status
func (m LogService20210330DestinationStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLogService20210330DestinationStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this log service 20210330 destination status based on context it is used
func (m LogService20210330DestinationStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
