// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LogService20210330TestDestinationResponse log service 20210330 test destination response
//
// swagger:model log_service_20210330TestDestinationResponse
type LogService20210330TestDestinationResponse struct {

	// error_message is an optional message that includes additional details about the error
	// it would be used if the error message is meaningful or actionable to the customer
	// in some cases (e.g. internal errors) we will not include any messages
	ErrorMessage string `json:"error_message,omitempty"`

	// request_id is a unique id that can be used to refer to this specific test operation
	RequestID string `json:"request_id,omitempty"`

	// status is the overall status of the test destination operation
	// success means that the test passed successfully
	// failed means that the test failed for some reason
	Status string `json:"status,omitempty"`

	// test_payload is the log payload we sent to the customer destination
	// this would only be set if the status is "success"
	TestPayload string `json:"test_payload,omitempty"`
}

// Validate validates this log service 20210330 test destination response
func (m *LogService20210330TestDestinationResponse) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this log service 20210330 test destination response based on context it is used
func (m *LogService20210330TestDestinationResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LogService20210330TestDestinationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogService20210330TestDestinationResponse) UnmarshalBinary(b []byte) error {
	var res LogService20210330TestDestinationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
