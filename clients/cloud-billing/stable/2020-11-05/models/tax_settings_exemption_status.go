// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TaxSettingsExemptionStatus tax settings exemption status
//
// swagger:model TaxSettingsExemptionStatus
type TaxSettingsExemptionStatus string

func NewTaxSettingsExemptionStatus(value TaxSettingsExemptionStatus) *TaxSettingsExemptionStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TaxSettingsExemptionStatus.
func (m TaxSettingsExemptionStatus) Pointer() *TaxSettingsExemptionStatus {
	return &m
}

const (

	// TaxSettingsExemptionStatusNONE captures enum value "NONE"
	TaxSettingsExemptionStatusNONE TaxSettingsExemptionStatus = "NONE"

	// TaxSettingsExemptionStatusEXEMPT captures enum value "EXEMPT"
	TaxSettingsExemptionStatusEXEMPT TaxSettingsExemptionStatus = "EXEMPT"

	// TaxSettingsExemptionStatusREVERSE captures enum value "REVERSE"
	TaxSettingsExemptionStatusREVERSE TaxSettingsExemptionStatus = "REVERSE"
)

// for schema
var taxSettingsExemptionStatusEnum []interface{}

func init() {
	var res []TaxSettingsExemptionStatus
	if err := json.Unmarshal([]byte(`["NONE","EXEMPT","REVERSE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taxSettingsExemptionStatusEnum = append(taxSettingsExemptionStatusEnum, v)
	}
}

func (m TaxSettingsExemptionStatus) validateTaxSettingsExemptionStatusEnum(path, location string, value TaxSettingsExemptionStatus) error {
	if err := validate.EnumCase(path, location, value, taxSettingsExemptionStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this tax settings exemption status
func (m TaxSettingsExemptionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTaxSettingsExemptionStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this tax settings exemption status based on context it is used
func (m TaxSettingsExemptionStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
