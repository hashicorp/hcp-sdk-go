// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Billing20201105StatementOnDemandMetadata OnDemandUsage contains PAYG specific properties.
//
// swagger:model billing_20201105StatementOnDemandMetadata
type Billing20201105StatementOnDemandMetadata struct {

	// discount is the amount of credits that would be deducted from the subtotal
	// if an invoice would be generated.
	Discount string `json:"discount,omitempty"`

	// remaining_balance is the account balance remaining after deducting the
	// calculated usage's subtotal_cost. This should be considered as an estimate
	// and understood as the potential new account balance if an invoice was
	// generated at the end of the billing period covered by this usage.
	RemainingBalance string `json:"remaining_balance,omitempty"`

	// status is the payment status of a PAYG statement
	Status *Cloudbilling20201105Status `json:"status,omitempty"`

	// subtotal_cost is the cost produced within this billing period. It's the sum
	// of all calculated line items' amounts.
	SubtotalCost string `json:"subtotal_cost,omitempty"`
}

// Validate validates this billing 20201105 statement on demand metadata
func (m *Billing20201105StatementOnDemandMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Billing20201105StatementOnDemandMetadata) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this billing 20201105 statement on demand metadata based on the context it is used
func (m *Billing20201105StatementOnDemandMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Billing20201105StatementOnDemandMetadata) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Billing20201105StatementOnDemandMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Billing20201105StatementOnDemandMetadata) UnmarshalBinary(b []byte) error {
	var res Billing20201105StatementOnDemandMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
