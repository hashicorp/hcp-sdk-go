// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Billing20201105Statement RunningUsage describes the usage that accrued during a specific
// billing period.
//
// swagger:model billing_20201105Statement
type Billing20201105Statement struct {

	// billing_period_end is the end time of the period that was considered for
	// this usage calculation.
	// Format: date-time
	BillingPeriodEnd strfmt.DateTime `json:"billing_period_end,omitempty"`

	// billing_period_start is the start time of the period that was considered
	// for this usage calculation.
	// Format: date-time
	BillingPeriodStart strfmt.DateTime `json:"billing_period_start,omitempty"`

	// fcp contains flexible consumption specific properties.
	FlexibleConsumptionMetadata *Billing20201105StatementFlexibleConsumptionMetadata `json:"flexible_consumption_metadata,omitempty"`

	// id is the id associated with the statement.
	ID string `json:"id,omitempty"`

	// last_updated_at is the last time this statement gets updated.
	// This shows the last usage time that is included in this statement.
	// Format: date-time
	LastUpdatedAt strfmt.DateTime `json:"last_updated_at,omitempty"`

	// on_demand contains pay-as-you-go specific properties.
	OnDemandMetadata *Billing20201105StatementOnDemandMetadata `json:"on_demand_metadata,omitempty"`

	// resources has information about each resource that is part of the statement.
	Resources []*Billing20201105StatementResource `json:"resources"`

	// total is the cost produced within this billing period minus any
	// discount that is granted because of a positive account balance. This
	// should be considered an estimate because not all information required to
	// issue an invoice might have been taken into consideration (e.g. billing
	// address country and tax might not be reflected in this value).
	Total string `json:"total,omitempty"`
}

// Validate validates this billing 20201105 statement
func (m *Billing20201105Statement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillingPeriodEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingPeriodStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlexibleConsumptionMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnDemandMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Billing20201105Statement) validateBillingPeriodEnd(formats strfmt.Registry) error {
	if swag.IsZero(m.BillingPeriodEnd) { // not required
		return nil
	}

	if err := validate.FormatOf("billing_period_end", "body", "date-time", m.BillingPeriodEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Billing20201105Statement) validateBillingPeriodStart(formats strfmt.Registry) error {
	if swag.IsZero(m.BillingPeriodStart) { // not required
		return nil
	}

	if err := validate.FormatOf("billing_period_start", "body", "date-time", m.BillingPeriodStart.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Billing20201105Statement) validateFlexibleConsumptionMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.FlexibleConsumptionMetadata) { // not required
		return nil
	}

	if m.FlexibleConsumptionMetadata != nil {
		if err := m.FlexibleConsumptionMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flexible_consumption_metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flexible_consumption_metadata")
			}
			return err
		}
	}

	return nil
}

func (m *Billing20201105Statement) validateLastUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("last_updated_at", "body", "date-time", m.LastUpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Billing20201105Statement) validateOnDemandMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.OnDemandMetadata) { // not required
		return nil
	}

	if m.OnDemandMetadata != nil {
		if err := m.OnDemandMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("on_demand_metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("on_demand_metadata")
			}
			return err
		}
	}

	return nil
}

func (m *Billing20201105Statement) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	for i := 0; i < len(m.Resources); i++ {
		if swag.IsZero(m.Resources[i]) { // not required
			continue
		}

		if m.Resources[i] != nil {
			if err := m.Resources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this billing 20201105 statement based on the context it is used
func (m *Billing20201105Statement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFlexibleConsumptionMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOnDemandMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Billing20201105Statement) contextValidateFlexibleConsumptionMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.FlexibleConsumptionMetadata != nil {
		if err := m.FlexibleConsumptionMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flexible_consumption_metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flexible_consumption_metadata")
			}
			return err
		}
	}

	return nil
}

func (m *Billing20201105Statement) contextValidateOnDemandMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.OnDemandMetadata != nil {
		if err := m.OnDemandMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("on_demand_metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("on_demand_metadata")
			}
			return err
		}
	}

	return nil
}

func (m *Billing20201105Statement) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Resources); i++ {

		if m.Resources[i] != nil {
			if err := m.Resources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Billing20201105Statement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Billing20201105Statement) UnmarshalBinary(b []byte) error {
	var res Billing20201105Statement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
