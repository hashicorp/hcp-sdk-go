// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConsumptionPoolUpdateInfoUpdateCause update_cause defines possible reasons for the update to the consumption pool
//
// swagger:model ConsumptionPoolUpdateInfoUpdateCause
type ConsumptionPoolUpdateInfoUpdateCause string

func NewConsumptionPoolUpdateInfoUpdateCause(value ConsumptionPoolUpdateInfoUpdateCause) *ConsumptionPoolUpdateInfoUpdateCause {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ConsumptionPoolUpdateInfoUpdateCause.
func (m ConsumptionPoolUpdateInfoUpdateCause) Pointer() *ConsumptionPoolUpdateInfoUpdateCause {
	return &m
}

const (

	// ConsumptionPoolUpdateInfoUpdateCauseADDON captures enum value "ADDON"
	ConsumptionPoolUpdateInfoUpdateCauseADDON ConsumptionPoolUpdateInfoUpdateCause = "ADDON"

	// ConsumptionPoolUpdateInfoUpdateCauseROLLOVER captures enum value "ROLLOVER"
	ConsumptionPoolUpdateInfoUpdateCauseROLLOVER ConsumptionPoolUpdateInfoUpdateCause = "ROLLOVER"
)

// for schema
var consumptionPoolUpdateInfoUpdateCauseEnum []interface{}

func init() {
	var res []ConsumptionPoolUpdateInfoUpdateCause
	if err := json.Unmarshal([]byte(`["ADDON","ROLLOVER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		consumptionPoolUpdateInfoUpdateCauseEnum = append(consumptionPoolUpdateInfoUpdateCauseEnum, v)
	}
}

func (m ConsumptionPoolUpdateInfoUpdateCause) validateConsumptionPoolUpdateInfoUpdateCauseEnum(path, location string, value ConsumptionPoolUpdateInfoUpdateCause) error {
	if err := validate.EnumCase(path, location, value, consumptionPoolUpdateInfoUpdateCauseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this consumption pool update info update cause
func (m ConsumptionPoolUpdateInfoUpdateCause) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConsumptionPoolUpdateInfoUpdateCauseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this consumption pool update info update cause based on context it is used
func (m ConsumptionPoolUpdateInfoUpdateCause) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
