// Code generated by go-swagger; DO NOT EDIT.

package secret_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/hashicorp/hcp-sdk-go/clients/cloud-vault-secrets/stable/2023-11-28/models"
)

// UpdateGcpDynamicSecretReader is a Reader for the UpdateGcpDynamicSecret structure.
type UpdateGcpDynamicSecretReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateGcpDynamicSecretReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateGcpDynamicSecretOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewUpdateGcpDynamicSecretDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateGcpDynamicSecretOK creates a UpdateGcpDynamicSecretOK with default headers values
func NewUpdateGcpDynamicSecretOK() *UpdateGcpDynamicSecretOK {
	return &UpdateGcpDynamicSecretOK{}
}

/*
UpdateGcpDynamicSecretOK describes a response with status code 200, with default header values.

A successful response.
*/
type UpdateGcpDynamicSecretOK struct {
	Payload *models.Secrets20231128UpdateGcpDynamicSecretResponse
}

// IsSuccess returns true when this update gcp dynamic secret o k response has a 2xx status code
func (o *UpdateGcpDynamicSecretOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update gcp dynamic secret o k response has a 3xx status code
func (o *UpdateGcpDynamicSecretOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gcp dynamic secret o k response has a 4xx status code
func (o *UpdateGcpDynamicSecretOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update gcp dynamic secret o k response has a 5xx status code
func (o *UpdateGcpDynamicSecretOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update gcp dynamic secret o k response a status code equal to that given
func (o *UpdateGcpDynamicSecretOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update gcp dynamic secret o k response
func (o *UpdateGcpDynamicSecretOK) Code() int {
	return 200
}

func (o *UpdateGcpDynamicSecretOK) Error() string {
	return fmt.Sprintf("[PUT /secrets/2023-11-28/organizations/{organization_id}/projects/{project_id}/apps/{app_name}/dynamic/gcp/secret/{name}][%d] updateGcpDynamicSecretOK  %+v", 200, o.Payload)
}

func (o *UpdateGcpDynamicSecretOK) String() string {
	return fmt.Sprintf("[PUT /secrets/2023-11-28/organizations/{organization_id}/projects/{project_id}/apps/{app_name}/dynamic/gcp/secret/{name}][%d] updateGcpDynamicSecretOK  %+v", 200, o.Payload)
}

func (o *UpdateGcpDynamicSecretOK) GetPayload() *models.Secrets20231128UpdateGcpDynamicSecretResponse {
	return o.Payload
}

func (o *UpdateGcpDynamicSecretOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Secrets20231128UpdateGcpDynamicSecretResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGcpDynamicSecretDefault creates a UpdateGcpDynamicSecretDefault with default headers values
func NewUpdateGcpDynamicSecretDefault(code int) *UpdateGcpDynamicSecretDefault {
	return &UpdateGcpDynamicSecretDefault{
		_statusCode: code,
	}
}

/*
UpdateGcpDynamicSecretDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type UpdateGcpDynamicSecretDefault struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// IsSuccess returns true when this update gcp dynamic secret default response has a 2xx status code
func (o *UpdateGcpDynamicSecretDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update gcp dynamic secret default response has a 3xx status code
func (o *UpdateGcpDynamicSecretDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update gcp dynamic secret default response has a 4xx status code
func (o *UpdateGcpDynamicSecretDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update gcp dynamic secret default response has a 5xx status code
func (o *UpdateGcpDynamicSecretDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update gcp dynamic secret default response a status code equal to that given
func (o *UpdateGcpDynamicSecretDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update gcp dynamic secret default response
func (o *UpdateGcpDynamicSecretDefault) Code() int {
	return o._statusCode
}

func (o *UpdateGcpDynamicSecretDefault) Error() string {
	return fmt.Sprintf("[PUT /secrets/2023-11-28/organizations/{organization_id}/projects/{project_id}/apps/{app_name}/dynamic/gcp/secret/{name}][%d] UpdateGcpDynamicSecret default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateGcpDynamicSecretDefault) String() string {
	return fmt.Sprintf("[PUT /secrets/2023-11-28/organizations/{organization_id}/projects/{project_id}/apps/{app_name}/dynamic/gcp/secret/{name}][%d] UpdateGcpDynamicSecret default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateGcpDynamicSecretDefault) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *UpdateGcpDynamicSecretDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
