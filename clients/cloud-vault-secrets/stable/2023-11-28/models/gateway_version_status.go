// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// GatewayVersionStatus gateway version status
//
// swagger:model GatewayVersionStatus
type GatewayVersionStatus string

func NewGatewayVersionStatus(value GatewayVersionStatus) *GatewayVersionStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated GatewayVersionStatus.
func (m GatewayVersionStatus) Pointer() *GatewayVersionStatus {
	return &m
}

const (

	// GatewayVersionStatusVERSIONSUPPORTED captures enum value "VERSION_SUPPORTED"
	GatewayVersionStatusVERSIONSUPPORTED GatewayVersionStatus = "VERSION_SUPPORTED"

	// GatewayVersionStatusVERSIONDEPRECATED captures enum value "VERSION_DEPRECATED"
	GatewayVersionStatusVERSIONDEPRECATED GatewayVersionStatus = "VERSION_DEPRECATED"

	// GatewayVersionStatusVERSIONOUTOFSUPPORT captures enum value "VERSION_OUT_OF_SUPPORT"
	GatewayVersionStatusVERSIONOUTOFSUPPORT GatewayVersionStatus = "VERSION_OUT_OF_SUPPORT"
)

// for schema
var gatewayVersionStatusEnum []interface{}

func init() {
	var res []GatewayVersionStatus
	if err := json.Unmarshal([]byte(`["VERSION_SUPPORTED","VERSION_DEPRECATED","VERSION_OUT_OF_SUPPORT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gatewayVersionStatusEnum = append(gatewayVersionStatusEnum, v)
	}
}

func (m GatewayVersionStatus) validateGatewayVersionStatusEnum(path, location string, value GatewayVersionStatus) error {
	if err := validate.EnumCase(path, location, value, gatewayVersionStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this gateway version status
func (m GatewayVersionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateGatewayVersionStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this gateway version status based on context it is used
func (m GatewayVersionStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
