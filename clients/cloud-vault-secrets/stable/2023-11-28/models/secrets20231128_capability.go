// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Secrets20231128Capability secrets 20231128 capability
//
// swagger:model secrets_20231128Capability
type Secrets20231128Capability string

func NewSecrets20231128Capability(value Secrets20231128Capability) *Secrets20231128Capability {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Secrets20231128Capability.
func (m Secrets20231128Capability) Pointer() *Secrets20231128Capability {
	return &m
}

const (

	// Secrets20231128CapabilityDYNAMIC captures enum value "DYNAMIC"
	Secrets20231128CapabilityDYNAMIC Secrets20231128Capability = "DYNAMIC"

	// Secrets20231128CapabilityROTATION captures enum value "ROTATION"
	Secrets20231128CapabilityROTATION Secrets20231128Capability = "ROTATION"

	// Secrets20231128CapabilitySYNC captures enum value "SYNC"
	Secrets20231128CapabilitySYNC Secrets20231128Capability = "SYNC"
)

// for schema
var secrets20231128CapabilityEnum []interface{}

func init() {
	var res []Secrets20231128Capability
	if err := json.Unmarshal([]byte(`["DYNAMIC","ROTATION","SYNC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		secrets20231128CapabilityEnum = append(secrets20231128CapabilityEnum, v)
	}
}

func (m Secrets20231128Capability) validateSecrets20231128CapabilityEnum(path, location string, value Secrets20231128Capability) error {
	if err := validate.EnumCase(path, location, value, secrets20231128CapabilityEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this secrets 20231128 capability
func (m Secrets20231128Capability) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSecrets20231128CapabilityEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this secrets 20231128 capability based on context it is used
func (m Secrets20231128Capability) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
