// Code generated by go-swagger; DO NOT EDIT.

package secret_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/hashicorp/hcp-sdk-go/clients/cloud-vault-secrets/stable/2023-06-13/models"
)

// CompleteGitHubInstallReader is a Reader for the CompleteGitHubInstall structure.
type CompleteGitHubInstallReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CompleteGitHubInstallReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCompleteGitHubInstallOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCompleteGitHubInstallDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCompleteGitHubInstallOK creates a CompleteGitHubInstallOK with default headers values
func NewCompleteGitHubInstallOK() *CompleteGitHubInstallOK {
	return &CompleteGitHubInstallOK{}
}

/*
CompleteGitHubInstallOK describes a response with status code 200, with default header values.

A successful response.
*/
type CompleteGitHubInstallOK struct {
	Payload *models.APIHTTPBody
}

// IsSuccess returns true when this complete git hub install o k response has a 2xx status code
func (o *CompleteGitHubInstallOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this complete git hub install o k response has a 3xx status code
func (o *CompleteGitHubInstallOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this complete git hub install o k response has a 4xx status code
func (o *CompleteGitHubInstallOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this complete git hub install o k response has a 5xx status code
func (o *CompleteGitHubInstallOK) IsServerError() bool {
	return false
}

// IsCode returns true when this complete git hub install o k response a status code equal to that given
func (o *CompleteGitHubInstallOK) IsCode(code int) bool {
	return code == 200
}

func (o *CompleteGitHubInstallOK) Error() string {
	return fmt.Sprintf("[GET /secrets/2023-06-13/sync/github/callback][%d] completeGitHubInstallOK  %+v", 200, o.Payload)
}

func (o *CompleteGitHubInstallOK) String() string {
	return fmt.Sprintf("[GET /secrets/2023-06-13/sync/github/callback][%d] completeGitHubInstallOK  %+v", 200, o.Payload)
}

func (o *CompleteGitHubInstallOK) GetPayload() *models.APIHTTPBody {
	return o.Payload
}

func (o *CompleteGitHubInstallOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIHTTPBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCompleteGitHubInstallDefault creates a CompleteGitHubInstallDefault with default headers values
func NewCompleteGitHubInstallDefault(code int) *CompleteGitHubInstallDefault {
	return &CompleteGitHubInstallDefault{
		_statusCode: code,
	}
}

/*
CompleteGitHubInstallDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type CompleteGitHubInstallDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// Code gets the status code for the complete git hub install default response
func (o *CompleteGitHubInstallDefault) Code() int {
	return o._statusCode
}

// IsSuccess returns true when this complete git hub install default response has a 2xx status code
func (o *CompleteGitHubInstallDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this complete git hub install default response has a 3xx status code
func (o *CompleteGitHubInstallDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this complete git hub install default response has a 4xx status code
func (o *CompleteGitHubInstallDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this complete git hub install default response has a 5xx status code
func (o *CompleteGitHubInstallDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this complete git hub install default response a status code equal to that given
func (o *CompleteGitHubInstallDefault) IsCode(code int) bool {
	return o._statusCode == code
}

func (o *CompleteGitHubInstallDefault) Error() string {
	return fmt.Sprintf("[GET /secrets/2023-06-13/sync/github/callback][%d] CompleteGitHubInstall default  %+v", o._statusCode, o.Payload)
}

func (o *CompleteGitHubInstallDefault) String() string {
	return fmt.Sprintf("[GET /secrets/2023-06-13/sync/github/callback][%d] CompleteGitHubInstall default  %+v", o._statusCode, o.Payload)
}

func (o *CompleteGitHubInstallDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *CompleteGitHubInstallDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
