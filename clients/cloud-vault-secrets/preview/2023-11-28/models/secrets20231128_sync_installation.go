// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Secrets20231128SyncInstallation secrets 20231128 sync installation
//
// swagger:model secrets_20231128SyncInstallation
type Secrets20231128SyncInstallation struct {

	// aws assume role
	AwsAssumeRole *Secrets20231128AwsAssumeRoleMetadata `json:"aws_assume_role,omitempty"`

	// gh app
	GhApp *Secrets20231128GhAppMetadata `json:"gh_app,omitempty"`

	// hcp terraform
	HcpTerraform *Secrets20231128HcpTerraformMetadata `json:"hcp_terraform,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// organization id
	OrganizationID string `json:"organization_id,omitempty"`

	// project id
	ProjectID string `json:"project_id,omitempty"`

	// vercel oauth
	VercelOauth *Secrets20231128VercelOAuthMetadata `json:"vercel_oauth,omitempty"`
}

// Validate validates this secrets 20231128 sync installation
func (m *Secrets20231128SyncInstallation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsAssumeRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGhApp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHcpTerraform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVercelOauth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Secrets20231128SyncInstallation) validateAwsAssumeRole(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsAssumeRole) { // not required
		return nil
	}

	if m.AwsAssumeRole != nil {
		if err := m.AwsAssumeRole.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws_assume_role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws_assume_role")
			}
			return err
		}
	}

	return nil
}

func (m *Secrets20231128SyncInstallation) validateGhApp(formats strfmt.Registry) error {
	if swag.IsZero(m.GhApp) { // not required
		return nil
	}

	if m.GhApp != nil {
		if err := m.GhApp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gh_app")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gh_app")
			}
			return err
		}
	}

	return nil
}

func (m *Secrets20231128SyncInstallation) validateHcpTerraform(formats strfmt.Registry) error {
	if swag.IsZero(m.HcpTerraform) { // not required
		return nil
	}

	if m.HcpTerraform != nil {
		if err := m.HcpTerraform.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hcp_terraform")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hcp_terraform")
			}
			return err
		}
	}

	return nil
}

func (m *Secrets20231128SyncInstallation) validateVercelOauth(formats strfmt.Registry) error {
	if swag.IsZero(m.VercelOauth) { // not required
		return nil
	}

	if m.VercelOauth != nil {
		if err := m.VercelOauth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vercel_oauth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vercel_oauth")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this secrets 20231128 sync installation based on the context it is used
func (m *Secrets20231128SyncInstallation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAwsAssumeRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGhApp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHcpTerraform(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVercelOauth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Secrets20231128SyncInstallation) contextValidateAwsAssumeRole(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsAssumeRole != nil {

		if swag.IsZero(m.AwsAssumeRole) { // not required
			return nil
		}

		if err := m.AwsAssumeRole.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws_assume_role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("aws_assume_role")
			}
			return err
		}
	}

	return nil
}

func (m *Secrets20231128SyncInstallation) contextValidateGhApp(ctx context.Context, formats strfmt.Registry) error {

	if m.GhApp != nil {

		if swag.IsZero(m.GhApp) { // not required
			return nil
		}

		if err := m.GhApp.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gh_app")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gh_app")
			}
			return err
		}
	}

	return nil
}

func (m *Secrets20231128SyncInstallation) contextValidateHcpTerraform(ctx context.Context, formats strfmt.Registry) error {

	if m.HcpTerraform != nil {

		if swag.IsZero(m.HcpTerraform) { // not required
			return nil
		}

		if err := m.HcpTerraform.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hcp_terraform")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hcp_terraform")
			}
			return err
		}
	}

	return nil
}

func (m *Secrets20231128SyncInstallation) contextValidateVercelOauth(ctx context.Context, formats strfmt.Registry) error {

	if m.VercelOauth != nil {

		if swag.IsZero(m.VercelOauth) { // not required
			return nil
		}

		if err := m.VercelOauth.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vercel_oauth")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vercel_oauth")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Secrets20231128SyncInstallation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Secrets20231128SyncInstallation) UnmarshalBinary(b []byte) error {
	var res Secrets20231128SyncInstallation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
