// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SecretServiceUpdateSyncInstallationBody secret service update sync installation body
//
// swagger:model SecretServiceUpdateSyncInstallationBody
type SecretServiceUpdateSyncInstallationBody struct {

	// hcp terraform update installation request
	HcpTerraformUpdateInstallationRequest *Secrets20231128HcpTerraformUpdateInstallationRequest `json:"hcp_terraform_update_installation_request,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this secret service update sync installation body
func (m *SecretServiceUpdateSyncInstallationBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHcpTerraformUpdateInstallationRequest(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecretServiceUpdateSyncInstallationBody) validateHcpTerraformUpdateInstallationRequest(formats strfmt.Registry) error {
	if swag.IsZero(m.HcpTerraformUpdateInstallationRequest) { // not required
		return nil
	}

	if m.HcpTerraformUpdateInstallationRequest != nil {
		if err := m.HcpTerraformUpdateInstallationRequest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hcp_terraform_update_installation_request")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hcp_terraform_update_installation_request")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this secret service update sync installation body based on the context it is used
func (m *SecretServiceUpdateSyncInstallationBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHcpTerraformUpdateInstallationRequest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecretServiceUpdateSyncInstallationBody) contextValidateHcpTerraformUpdateInstallationRequest(ctx context.Context, formats strfmt.Registry) error {

	if m.HcpTerraformUpdateInstallationRequest != nil {

		if swag.IsZero(m.HcpTerraformUpdateInstallationRequest) { // not required
			return nil
		}

		if err := m.HcpTerraformUpdateInstallationRequest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hcp_terraform_update_installation_request")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hcp_terraform_update_installation_request")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecretServiceUpdateSyncInstallationBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecretServiceUpdateSyncInstallationBody) UnmarshalBinary(b []byte) error {
	var res SecretServiceUpdateSyncInstallationBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
