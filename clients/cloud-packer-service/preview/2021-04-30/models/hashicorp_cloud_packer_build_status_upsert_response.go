// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HashicorpCloudPackerBuildStatusUpsertResponse hashicorp cloud packer build status upsert response
//
// swagger:model hashicorp.cloud.packer.BuildStatusUpsertResponse
type HashicorpCloudPackerBuildStatusUpsertResponse struct {

	// Related bucket
	Bucket *HashicorpCloudPackerBucket `json:"bucket,omitempty"`

	// Related build
	Build *HashicorpCloudPackerBuild `json:"build,omitempty"`

	// created images
	CreatedImages []*HashicorpCloudPackerImage `json:"created_images"`

	// Related iteration
	Iteration *HashicorpCloudPackerIteration `json:"iteration,omitempty"`

	// true if the iteration was created.
	IterationCreated bool `json:"iteration_created,omitempty"`
}

// Validate validates this hashicorp cloud packer build status upsert response
func (m *HashicorpCloudPackerBuildStatusUpsertResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBucket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuild(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIteration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpCloudPackerBuildStatusUpsertResponse) validateBucket(formats strfmt.Registry) error {
	if swag.IsZero(m.Bucket) { // not required
		return nil
	}

	if m.Bucket != nil {
		if err := m.Bucket.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bucket")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpCloudPackerBuildStatusUpsertResponse) validateBuild(formats strfmt.Registry) error {
	if swag.IsZero(m.Build) { // not required
		return nil
	}

	if m.Build != nil {
		if err := m.Build.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("build")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpCloudPackerBuildStatusUpsertResponse) validateCreatedImages(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedImages) { // not required
		return nil
	}

	for i := 0; i < len(m.CreatedImages); i++ {
		if swag.IsZero(m.CreatedImages[i]) { // not required
			continue
		}

		if m.CreatedImages[i] != nil {
			if err := m.CreatedImages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("created_images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HashicorpCloudPackerBuildStatusUpsertResponse) validateIteration(formats strfmt.Registry) error {
	if swag.IsZero(m.Iteration) { // not required
		return nil
	}

	if m.Iteration != nil {
		if err := m.Iteration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iteration")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hashicorp cloud packer build status upsert response based on the context it is used
func (m *HashicorpCloudPackerBuildStatusUpsertResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBucket(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBuild(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedImages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIteration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HashicorpCloudPackerBuildStatusUpsertResponse) contextValidateBucket(ctx context.Context, formats strfmt.Registry) error {

	if m.Bucket != nil {
		if err := m.Bucket.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bucket")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpCloudPackerBuildStatusUpsertResponse) contextValidateBuild(ctx context.Context, formats strfmt.Registry) error {

	if m.Build != nil {
		if err := m.Build.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("build")
			}
			return err
		}
	}

	return nil
}

func (m *HashicorpCloudPackerBuildStatusUpsertResponse) contextValidateCreatedImages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CreatedImages); i++ {

		if m.CreatedImages[i] != nil {
			if err := m.CreatedImages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("created_images" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HashicorpCloudPackerBuildStatusUpsertResponse) contextValidateIteration(ctx context.Context, formats strfmt.Registry) error {

	if m.Iteration != nil {
		if err := m.Iteration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("iteration")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HashicorpCloudPackerBuildStatusUpsertResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HashicorpCloudPackerBuildStatusUpsertResponse) UnmarshalBinary(b []byte) error {
	var res HashicorpCloudPackerBuildStatusUpsertResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
