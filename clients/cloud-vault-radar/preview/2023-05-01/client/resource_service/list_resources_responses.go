// Code generated by go-swagger; DO NOT EDIT.

package resource_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/hashicorp/hcp-sdk-go/clients/cloud-vault-radar/preview/2023-05-01/models"
)

// ListResourcesReader is a Reader for the ListResources structure.
type ListResourcesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListResourcesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListResourcesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewListResourcesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListResourcesOK creates a ListResourcesOK with default headers values
func NewListResourcesOK() *ListResourcesOK {
	return &ListResourcesOK{}
}

/*
ListResourcesOK describes a response with status code 200, with default header values.

A successful response.
*/
type ListResourcesOK struct {
	Payload *models.VaultRadar20230501ResourceListResponse
}

// IsSuccess returns true when this list resources o k response has a 2xx status code
func (o *ListResourcesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list resources o k response has a 3xx status code
func (o *ListResourcesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list resources o k response has a 4xx status code
func (o *ListResourcesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list resources o k response has a 5xx status code
func (o *ListResourcesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list resources o k response a status code equal to that given
func (o *ListResourcesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list resources o k response
func (o *ListResourcesOK) Code() int {
	return 200
}

func (o *ListResourcesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /2023-05-01/vault-radar/projects/{location.project_id}/resources/list][%d] listResourcesOK %s", 200, payload)
}

func (o *ListResourcesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /2023-05-01/vault-radar/projects/{location.project_id}/resources/list][%d] listResourcesOK %s", 200, payload)
}

func (o *ListResourcesOK) GetPayload() *models.VaultRadar20230501ResourceListResponse {
	return o.Payload
}

func (o *ListResourcesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.VaultRadar20230501ResourceListResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListResourcesDefault creates a ListResourcesDefault with default headers values
func NewListResourcesDefault(code int) *ListResourcesDefault {
	return &ListResourcesDefault{
		_statusCode: code,
	}
}

/*
ListResourcesDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ListResourcesDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this list resources default response has a 2xx status code
func (o *ListResourcesDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this list resources default response has a 3xx status code
func (o *ListResourcesDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this list resources default response has a 4xx status code
func (o *ListResourcesDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this list resources default response has a 5xx status code
func (o *ListResourcesDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this list resources default response a status code equal to that given
func (o *ListResourcesDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the list resources default response
func (o *ListResourcesDefault) Code() int {
	return o._statusCode
}

func (o *ListResourcesDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /2023-05-01/vault-radar/projects/{location.project_id}/resources/list][%d] ListResources default %s", o._statusCode, payload)
}

func (o *ListResourcesDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /2023-05-01/vault-radar/projects/{location.project_id}/resources/list][%d] ListResources default %s", o._statusCode, payload)
}

func (o *ListResourcesDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *ListResourcesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ListResourcesBody list resources body
swagger:model ListResourcesBody
*/
type ListResourcesBody struct {

	// location
	Location *ListResourcesParamsBodyLocation `json:"location,omitempty"`

	// search
	Search *models.VaultRadar20230501SearchSchema `json:"search,omitempty"`
}

// Validate validates this list resources body
func (o *ListResourcesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSearch(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListResourcesBody) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(o.Location) { // not required
		return nil
	}

	if o.Location != nil {
		if err := o.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "location")
			}
			return err
		}
	}

	return nil
}

func (o *ListResourcesBody) validateSearch(formats strfmt.Registry) error {
	if swag.IsZero(o.Search) { // not required
		return nil
	}

	if o.Search != nil {
		if err := o.Search.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "search")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "search")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list resources body based on the context it is used
func (o *ListResourcesBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateSearch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListResourcesBody) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if o.Location != nil {

		if swag.IsZero(o.Location) { // not required
			return nil
		}

		if err := o.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "location")
			}
			return err
		}
	}

	return nil
}

func (o *ListResourcesBody) contextValidateSearch(ctx context.Context, formats strfmt.Registry) error {

	if o.Search != nil {

		if swag.IsZero(o.Search) { // not required
			return nil
		}

		if err := o.Search.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "search")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "search")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListResourcesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListResourcesBody) UnmarshalBinary(b []byte) error {
	var res ListResourcesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
ListResourcesParamsBodyLocation Location represents a target for an operation in HCP.
swagger:model ListResourcesParamsBodyLocation
*/
type ListResourcesParamsBodyLocation struct {

	// organization_id is the id of the organization.
	OrganizationID string `json:"organization_id,omitempty"`

	// region
	Region *models.LocationRegion `json:"region,omitempty"`
}

// Validate validates this list resources params body location
func (o *ListResourcesParamsBodyLocation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListResourcesParamsBodyLocation) validateRegion(formats strfmt.Registry) error {
	if swag.IsZero(o.Region) { // not required
		return nil
	}

	if o.Region != nil {
		if err := o.Region.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "location" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "location" + "." + "region")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list resources params body location based on the context it is used
func (o *ListResourcesParamsBodyLocation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListResourcesParamsBodyLocation) contextValidateRegion(ctx context.Context, formats strfmt.Registry) error {

	if o.Region != nil {

		if swag.IsZero(o.Region) { // not required
			return nil
		}

		if err := o.Region.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "location" + "." + "region")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "location" + "." + "region")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListResourcesParamsBodyLocation) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListResourcesParamsBodyLocation) UnmarshalBinary(b []byte) error {
	var res ListResourcesParamsBodyLocation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
