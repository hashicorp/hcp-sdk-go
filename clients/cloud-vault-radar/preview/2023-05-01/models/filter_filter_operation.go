// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// FilterFilterOperation filter filter operation
//
// swagger:model FilterFilterOperation
type FilterFilterOperation string

func NewFilterFilterOperation(value FilterFilterOperation) *FilterFilterOperation {
	return &value
}

// Pointer returns a pointer to a freshly-allocated FilterFilterOperation.
func (m FilterFilterOperation) Pointer() *FilterFilterOperation {
	return &m
}

const (

	// FilterFilterOperationUNKNOWN captures enum value "UNKNOWN"
	FilterFilterOperationUNKNOWN FilterFilterOperation = "UNKNOWN"

	// FilterFilterOperationEQ captures enum value "EQ"
	FilterFilterOperationEQ FilterFilterOperation = "EQ"

	// FilterFilterOperationGT captures enum value "GT"
	FilterFilterOperationGT FilterFilterOperation = "GT"

	// FilterFilterOperationGE captures enum value "GE"
	FilterFilterOperationGE FilterFilterOperation = "GE"

	// FilterFilterOperationLT captures enum value "LT"
	FilterFilterOperationLT FilterFilterOperation = "LT"

	// FilterFilterOperationLE captures enum value "LE"
	FilterFilterOperationLE FilterFilterOperation = "LE"

	// FilterFilterOperationNEQ captures enum value "NEQ"
	FilterFilterOperationNEQ FilterFilterOperation = "NEQ"

	// FilterFilterOperationNEQNULLAWARE captures enum value "NEQ_NULL_AWARE"
	FilterFilterOperationNEQNULLAWARE FilterFilterOperation = "NEQ_NULL_AWARE"

	// FilterFilterOperationLIKE captures enum value "LIKE"
	FilterFilterOperationLIKE FilterFilterOperation = "LIKE"

	// FilterFilterOperationILIKE captures enum value "ILIKE"
	FilterFilterOperationILIKE FilterFilterOperation = "ILIKE"
)

// for schema
var filterFilterOperationEnum []interface{}

func init() {
	var res []FilterFilterOperation
	if err := json.Unmarshal([]byte(`["UNKNOWN","EQ","GT","GE","LT","LE","NEQ","NEQ_NULL_AWARE","LIKE","ILIKE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		filterFilterOperationEnum = append(filterFilterOperationEnum, v)
	}
}

func (m FilterFilterOperation) validateFilterFilterOperationEnum(path, location string, value FilterFilterOperation) error {
	if err := validate.EnumCase(path, location, value, filterFilterOperationEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this filter filter operation
func (m FilterFilterOperation) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateFilterFilterOperationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this filter filter operation based on context it is used
func (m FilterFilterOperation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
